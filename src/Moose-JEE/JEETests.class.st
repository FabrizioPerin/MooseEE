Class {
	#name : #JEETests,
	#superclass : #TestCase,
	#instVars : [
		'root'
	],
	#category : #'Moose-JEE-Tests'
}

{ #category : #testing }
JEETests >> minimalEjbJar [

	^'<?xml version="1.0"?>
<ejb-jar>

<enterprise-beans>

	<!-- A minimal session EJB deployment -->
	<session>
 		 <ejb-name>AStatefulSession</ejb-name>
		<home>aPackage.AStatefulSessionHome</home>
		<remote>aPackage.AStatefulSession</remote>
		<ejb-class>aPackage.AStatefulSessionBean</ejb-class>
		<session-type>Stateful</session-type>
		<transaction-type>Container</transaction-type>
	</session>

	<session>
 		 <ejb-name>AStatelessSession</ejb-name>
		<home>aPackage.AStatelessSessionHome</home>
		<remote>aPackage.AStatelessSession</remote>
		<ejb-class>aPackage.AStatelessSessionBean</ejb-class>
		<session-type>Stateless</session-type>
		<transaction-type>Container</transaction-type>
	</session>

	<!-- A minimal CMP entity EJB deployment -->
	<entity>
		<ejb-name>ACMPEntity</ejb-name>
		<home>anotherPackage.ACMPEntityHome</home>
		<remote>anotherPackage.ACMPEntity</remote>
		<ejb-class>anotherPackage.ACMPEntityBean</ejb-class>
		<persistence-type>Container</persistence-type>
		<prim-key-class>anotherPackage.ACMPEntityPK</prim-key-class>
		<reentrant>False</reentrant>
		<cmp-field><field-name>attribute1</field-name></cmp-field>
		<cmp-field><field-name>attribute2</field-name></cmp-field>
      </entity>
      
	<!-- A minimal BMP entity EJB deployment -->
	<entity>
		<ejb-name>ABMPEntity</ejb-name>
		<home>anotherPackage.ABMPEntityHome</home>
		<remote>anotherPackage.ABMPEntity</remote>
		<ejb-class>anotherPackage.ABMPEntityBean</ejb-class>
		<persistence-type>Bean</persistence-type>
		<prim-key-class>anotherPackage.ABMPEntityPK</prim-key-class>
		<reentrant>False</reentrant>
	</entity>

	<message-driven>
		<ejb-name>AMessageDriven</ejb-name>
		<ejb-class>aPackage.AMessageBean</ejb-class>
		<transaction-type>Container</transaction-type>
		<message-driven-destination>
			<destination-type>
				javax.jms.Topic
			</destination-type>
		</message-driven-destination>
		...
	</message-driven>

</enterprise-beans>

<assembly-descriptor>

	<container-transaction> 
		<method> 
			<ejb-name>AStatefulSession</ejb-name> 
			<method-name>*</method-name> 
		</method> 
		<trans-attribute>Required</trans-attribute> 
	</container-transaction> 
	<container-transaction> 
		<method> 
			<ejb-name>AStatelessSession</ejb-name> 
			<method-name>aMethod</method-name> 
		</method> 
		<trans-attribute>Mandatory</trans-attribute> 
	</container-transaction> 
	<container-transaction> 
		<method> 
			<ejb-name>ABMPEntity</ejb-name> 
			<method-name>a*</method-name> 
		</method> 
		<trans-attribute>RequiresNew</trans-attribute> 
	</container-transaction> 

</assembly-descriptor>

</ejb-jar>
'
]

{ #category : #testing }
JEETests >> normalEjbJar [

	^'<?xml version="1.0" encoding="UTF-8"?>

<ejb-jar id="ejb-jar_1" xmlns="http://java.sun.com/xml/ns/j2ee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/ejb-jar_2_1.xsd" version="2.1">

   <description><![CDATA[No Description.]]></description>
   <display-name>Generated by XDoclet</display-name>

   <enterprise-beans>

      <!-- Session Beans -->
      <session id="Session_JIPPSProperties">
         <description><![CDATA[An EJB named JIPPSProperties]]></description>
         <display-name>JIPPSProperties</display-name>

         <ejb-name>JIPPSProperties</ejb-name>

         <home>ch.ige.jipps.JIPPSPropertiesHome</home>
         <remote>ch.ige.jipps.JIPPSProperties</remote>
         <local-home>ch.ige.jipps.JIPPSPropertiesLocalHome</local-home>
         <local>ch.ige.jipps.JIPPSPropertiesLocal</local>
         <ejb-class>ch.ige.jipps.JIPPSPropertiesBean</ejb-class>
         <session-type>Stateless</session-type>
         <transaction-type>Container</transaction-type>

         <resource-ref id="ResRef_1">
            <res-ref-name>mail/JavaMailSession</res-ref-name>
            <res-type>javax.mail.Session</res-type>
            <res-auth>Container</res-auth>
         </resource-ref>

      </session>

      <session id="Session_JIPPSInfo">
         <description><![CDATA[An EJB named JIPPSInfo]]></description>
         <display-name>JIPPSInfo</display-name>

         <ejb-name>JIPPSInfo</ejb-name>

         <home>ch.ige.jipps.JIPPSInfoHome</home>
         <remote>ch.ige.jipps.JIPPSInfo</remote>
         <local-home>ch.ige.jipps.JIPPSInfoLocalHome</local-home>
         <local>ch.ige.jipps.JIPPSInfoLocal</local>
         <ejb-class>ch.ige.jipps.JIPPSInfoBean</ejb-class>
         <session-type>Stateless</session-type>
         <transaction-type>Container</transaction-type>

      </session>

      <session id="Session_JMSPublisher">
         <description><![CDATA[An EJB named JMSPublisher]]></description>
         <display-name>JMSPublisher</display-name>

         <ejb-name>JMSPublisher</ejb-name>

         <home>ch.ige.jipps.JMSPublisherHome</home>
         <remote>ch.ige.jipps.JMSPublisher</remote>
         <local-home>ch.ige.jipps.JMSPublisherLocalHome</local-home>
         <local>ch.ige.jipps.JMSPublisherLocal</local>
         <ejb-class>ch.ige.jipps.JMSPublisherBean</ejb-class>
         <session-type>Stateless</session-type>
         <transaction-type>Container</transaction-type>

         <resource-ref id="ResRef_2">
            <res-ref-name>jms/PrintjobQueue</res-ref-name>
            <res-type>javax.jms.Destination</res-type>
            <res-auth>Container</res-auth>
         </resource-ref>
         <resource-ref id="ResRef_3">
            <res-ref-name>jms/PrintjobTopic</res-ref-name>
            <res-type>javax.jms.Destination</res-type>
            <res-auth>Container</res-auth>
         </resource-ref>
         <resource-ref id="ResRef_4">
            <res-ref-name>jms/ConnectionFactory</res-ref-name>
            <res-type>javax.jms.ConnectionFactory</res-type>
            <res-auth>Container</res-auth>
         </resource-ref>

      </session>

      <session id="Session_PrintJobStore">
         <description><![CDATA[An EJB named PrintJobStore]]></description>
         <display-name>PrintJobStore</display-name>

         <ejb-name>PrintJobStore</ejb-name>

         <local-home>ch.ige.jipps.PrintJobStoreLocalHome</local-home>
         <local>ch.ige.jipps.PrintJobStoreLocal</local>
         <ejb-class>ch.ige.jipps.PrintJobStoreBean</ejb-class>
         <session-type>Stateless</session-type>
         <transaction-type>Container</transaction-type>

      </session>

      <session id="Session_JIPPSFacade">
         <description><![CDATA[JIPPS Facade]]></description>
         <display-name>JIPPSFacade</display-name>

         <ejb-name>JIPPSFacade</ejb-name>

         <home>ch.ige.jipps.JIPPSFacadeHome</home>
         <remote>ch.ige.jipps.JIPPSFacade</remote>
         <ejb-class>ch.ige.jipps.JIPPSFacadeBean</ejb-class>
         <session-type>Stateless</session-type>
         <transaction-type>Container</transaction-type>

         <ejb-local-ref id="EJBLocalRef_1">
            <ejb-ref-name>ejb/JIPPSInfoLocal</ejb-ref-name>
            <ejb-ref-type>Session</ejb-ref-type>
            <local-home>ch.ige.jipps.JIPPSInfoLocalHome</local-home>
            <local>ch.ige.jipps.JIPPSInfoLocal</local>
            <ejb-link>JIPPSInfo</ejb-link>
         </ejb-local-ref>
         <ejb-local-ref id="EJBLocalRef_2">
            <ejb-ref-name>ejb/JMSPublisherLocal</ejb-ref-name>
            <ejb-ref-type>Session</ejb-ref-type>
            <local-home>ch.ige.jipps.JMSPublisherLocalHome</local-home>
            <local>ch.ige.jipps.JMSPublisherLocal</local>
            <ejb-link>JMSPublisher</ejb-link>
         </ejb-local-ref>
         <ejb-local-ref id="EJBLocalRef_3">
            <ejb-ref-name>ejb/PrintJobStoreLocal</ejb-ref-name>
            <ejb-ref-type>Session</ejb-ref-type>
            <local-home>ch.ige.jipps.PrintJobStoreLocalHome</local-home>
            <local>ch.ige.jipps.PrintJobStoreLocal</local>
            <ejb-link>PrintJobStore</ejb-link>
         </ejb-local-ref>
         <ejb-local-ref id="EJBLocalRef_4">
            <ejb-ref-name>ejb/JIPPSPropertiesLocal</ejb-ref-name>
            <ejb-ref-type>Session</ejb-ref-type>
            <local-home>ch.ige.jipps.JIPPSPropertiesLocalHome</local-home>
            <local>ch.ige.jipps.JIPPSPropertiesLocal</local>
            <ejb-link>JIPPSProperties</ejb-link>
         </ejb-local-ref>

         <resource-ref id="ResRef_5">
            <res-ref-name>mail/JavaMailSession</res-ref-name>
            <res-type>javax.mail.Session</res-type>
            <res-auth>Container</res-auth>
         </resource-ref>

      </session>

      <session id="Session_AmvTransactionManager">
         <description><![CDATA[AMVTransactionManager]]></description>
         <display-name>AmvTransactionManager</display-name>

         <ejb-name>AmvTransactionManager</ejb-name>

         <home>ch.ige.jipps.AmvTransactionManagerHome</home>
         <remote>ch.ige.jipps.AmvTransactionManager</remote>
         <ejb-class>ch.ige.jipps.AmvTransactionManagerBean</ejb-class>
         <session-type>Stateless</session-type>
         <transaction-type>Container</transaction-type>

      </session>

     <!--
       To add session beans that you have deployment descriptor info for, add
       a file to your XDoclet merge directory called session-beans.xml that contains
       the <session></session> markup for those beans.
     -->

      <!-- Entity Beans -->
     <!--
       To add entity beans that you have deployment descriptor info for, add
       a file to your XDoclet merge directory called entity-beans.xml that contains
       the <entity></entity> markup for those beans.
     -->

      <!-- Message Driven Beans -->
      <message-driven id="MessageDriven_1">
         <description><![CDATA[Reads from the JMS queue for publication confirmation letters coming from the Swissreg update.]]></description>

         <ejb-name>PublicationConfirmationMDBean</ejb-name>

         <ejb-class>ch.ige.jipps.PublicationConfirmationMDBean</ejb-class>

         <messaging-type>javax.jms.MessageListener</messaging-type>
         <transaction-type>Container</transaction-type>
         <message-destination-type>javax.jms.Queue</message-destination-type>
         <activation-config>
           <activation-config-property>
             <activation-config-property-name>destinationType</activation-config-property-name>
             <activation-config-property-value>javax.jms.Queue</activation-config-property-value>
           </activation-config-property>
         </activation-config>

      </message-driven>

      <message-driven id="MessageDriven_2">
         <description><![CDATA[DirectMDBean: Direkter Einstieg in die Komponente JIPPS.]]></description>

         <ejb-name>DirectMDBean</ejb-name>

         <ejb-class>ch.ige.jipps.DirectMDBean</ejb-class>

         <messaging-type>javax.jms.MessageListener</messaging-type>
         <transaction-type>Container</transaction-type>
         <message-destination-type>javax.jms.Queue</message-destination-type>
         <activation-config>
           <activation-config-property>
             <activation-config-property-name>destinationType</activation-config-property-name>
             <activation-config-property-value>javax.jms.Queue</activation-config-property-value>
           </activation-config-property>
         </activation-config>

      </message-driven>

     <!--
       To add message driven beans that you have deployment descriptor info for, add
       a file to your XDoclet merge directory called message-driven-beans.xml that contains
       the <message-driven></message-driven> markup for those beans.
     -->

   </enterprise-beans>

   <!-- Relationships -->

   <!-- Assembly Descriptor -->
     <!--
       To specify your own assembly descriptor info here, add a file to your
       XDoclet merge directory called assembly-descriptor.xml that contains
       the <assembly-descriptor></assembly-descriptor> markup.
     -->

   <assembly-descriptor id="AssemblyDescriptor_1">
     <!--
       To specify additional security-role elements, add a file in the merge
       directory called ejb-security-roles.xml that contains them.
     -->

   <!-- method permissions -->
     <!--
       To specify additional method-permission elements, add a file in the merge
       directory called ejb-method-permissions.ent that contains them.
     -->

   <!-- transactions -->
     <!--
       To specify additional container-transaction elements, add a file in the merge
       directory called ejb-container-transactions.ent that contains them.
     -->
   <container-transaction id="MethodTransaction_1">
      <method id="MethodElement_1">
         <ejb-name>JIPPSProperties</ejb-name>
          <method-name>*</method-name>
       </method>
       <trans-attribute>RequiresNew</trans-attribute>
    </container-transaction>
   <container-transaction id="MethodTransaction_2">
      <method id="MethodElement_2">
         <ejb-name>JIPPSInfo</ejb-name>
          <method-name>*</method-name>
       </method>
       <trans-attribute>RequiresNew</trans-attribute>
    </container-transaction>
   <container-transaction id="MethodTransaction_3">
      <method id="MethodElement_3">
         <ejb-name>JMSPublisher</ejb-name>
          <method-name>*</method-name>
       </method>
       <trans-attribute>Supports</trans-attribute>
    </container-transaction>
   <container-transaction id="MethodTransaction_4">
      <method id="MethodElement_4">
         <ejb-name>JMSPublisher</ejb-name>
         <method-intf>Local</method-intf>
         <method-name>getInstalledPrintersFromPrintservice</method-name>
         <method-params>
         </method-params>
      </method>
      <trans-attribute>NotSupported</trans-attribute>
   </container-transaction>
   <container-transaction id="MethodTransaction_5">
      <method id="MethodElement_5">
         <ejb-name>JMSPublisher</ejb-name>
         <method-intf>Remote</method-intf>
         <method-name>getInstalledPrintersFromPrintservice</method-name>
         <method-params>
         </method-params>
      </method>
      <trans-attribute>NotSupported</trans-attribute>
   </container-transaction>
   <container-transaction id="MethodTransaction_6">
      <method id="MethodElement_6">
         <ejb-name>PrintJobStore</ejb-name>
          <method-name>*</method-name>
       </method>
       <trans-attribute>RequiresNew</trans-attribute>
    </container-transaction>
   <container-transaction id="MethodTransaction_7">
      <method id="MethodElement_7">
         <ejb-name>JIPPSFacade</ejb-name>
          <method-name>*</method-name>
       </method>
       <trans-attribute>Required</trans-attribute>
    </container-transaction>
   <container-transaction id="MethodTransaction_8">
      <method id="MethodElement_8">
         <ejb-name>JIPPSFacade</ejb-name>
         <method-intf>Remote</method-intf>
         <method-name>updateVerarbStat</method-name>
         <method-params>
            <method-param>ch.ige.jipps.vo.DruckPeriVO</method-param>
         </method-params>
      </method>
      <trans-attribute>RequiresNew</trans-attribute>
   </container-transaction>
   <container-transaction id="MethodTransaction_9">
      <method id="MethodElement_9">
         <ejb-name>JIPPSFacade</ejb-name>
         <method-intf>Remote</method-intf>
         <method-name>printAMVOne</method-name>
         <method-params>
            <method-param>boolean</method-param>
         </method-params>
      </method>
      <trans-attribute>Supports</trans-attribute>
   </container-transaction>
   <container-transaction id="MethodTransaction_10">
      <method id="MethodElement_10">
         <ejb-name>JIPPSFacade</ejb-name>
         <method-intf>Remote</method-intf>
         <method-name>printAMVOne</method-name>
         <method-params>
            <method-param>boolean</method-param>
            <method-param>int</method-param>
            <method-param>boolean</method-param>
         </method-params>
      </method>
      <trans-attribute>Supports</trans-attribute>
   </container-transaction>
   <container-transaction id="MethodTransaction_11">
      <method id="MethodElement_11">
         <ejb-name>JIPPSFacade</ejb-name>
         <method-intf>Remote</method-intf>
         <method-name>finishAMVOne</method-name>
         <method-params>
            <method-param>boolean</method-param>
            <method-param>int</method-param>
            <method-param>boolean</method-param>
         </method-params>
      </method>
      <trans-attribute>Supports</trans-attribute>
   </container-transaction>
   <container-transaction id="MethodTransaction_12">
      <method id="MethodElement_12">
         <ejb-name>JIPPSFacade</ejb-name>
         <method-intf>Remote</method-intf>
         <method-name>printAMVChanges</method-name>
         <method-params>
            <method-param>boolean</method-param>
         </method-params>
      </method>
      <trans-attribute>Supports</trans-attribute>
   </container-transaction>
   <container-transaction id="MethodTransaction_13">
      <method id="MethodElement_13">
         <ejb-name>AmvTransactionManager</ejb-name>
          <method-name>*</method-name>
       </method>
       <trans-attribute>RequiresNew</trans-attribute>
    </container-transaction>

   <!-- finder transactions -->

   <!-- message destinations -->
     <!--
       To specify additional message-destination elements, add a file in the merge
       directory called ejb-message-destinations.ent that contains them.
     -->

   <!-- exclude list -->
     <!--
       To specify an exclude-list element, add a file in the merge directory
       called ejb-exclude-list.xml that contains it.
     -->
   </assembly-descriptor>

</ejb-jar>

'
]

{ #category : #testing }
JEETests >> sampleMooseModel [
	
	| mooseModel aPackage anotherPackage aStatelessSessionBean aStatefulSessionBean |
	mooseModel := MooseModel new.
	aPackage := FAMIXNamespace new
			name: #aPackage;
			yourself.
	anotherPackage := FAMIXNamespace new
			name: #anotherPackage;
			yourself.

	aStatelessSessionBean := FAMIXClass new
			name: #AStatelessSessionBean;
			container: aPackage;
			yourself.

	aStatelessSessionBean addMethod: (FAMIXMethod new
				name: #aMethod;
				parentType: aStatelessSessionBean;
				signature: #aMethod asString;
				yourself
			);
			addMethod: (FAMIXMethod new
				name: #anotherMethod;
				parentType: aStatelessSessionBean;
				signature: #anotherMethod asString;
				yourself
			).
	aStatefulSessionBean := FAMIXClass new
			name: #AStatefulSessionBean;
			container: aPackage;
			yourself.
	aStatefulSessionBean
			addMethod: (FAMIXMethod new
				name: #someMethod;
				parentType: aStatefulSessionBean;
				signature: #someMethod asString;
				yourself
			);
			addMethod: (FAMIXMethod new
				name: #someOtherMethod;
				parentType: aStatefulSessionBean;
				signature: #someOtherMethod asString;
				yourself
			).

		
	mooseModel
		addAll: aStatelessSessionBean methods;
		addAll: aStatefulSessionBean methods;
		add: aPackage;
		add: anotherPackage;
		add: (FAMIXClass new
			name: #AStatelessSessionHome;
			container: aPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #AStatelessSession;
			container: aPackage;
			yourself
		);
		add: aStatelessSessionBean;
		add: (FAMIXClass new
			name: #AStatefulSessionHome;
			container: aPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #AStatefulSession;
			container: aPackage;
			yourself
		);
		add: aStatefulSessionBean;
		add: (FAMIXClass new
			name: #ACMPEntityHome;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #ACMPEntity;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #ACMPEntityBean;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #ACMPEntityPK;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #ABMPEntityHome;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #ABMPEntity;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #ABMPEntityBean;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #ABMPEntity;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #AMessageBean;
			container: aPackage;
			yourself
		).


	^mooseModel
]

{ #category : #testing }
JEETests >> sampleMooseModelWithInvocation [
	
	| mooseModel aPackage anotherPackage aStatelessSessionBean aStatefulSessionBean invocation someMethod someOtherMethod aMethod |

	mooseModel := MooseModel new.
	aPackage := FAMIXNamespace new
			name: #aPackage;
			yourself.
	anotherPackage := FAMIXNamespace new
			name: #anotherPackage;
			yourself.

	aStatelessSessionBean := FAMIXClass new
			name: #AStatelessSessionBean;
			container: aPackage;
			yourself.

	aMethod := FAMIXMethod new
				name: #aMethod;
				parentType: aStatelessSessionBean;
				signature: #aMethod asString;
				yourself.

	aStatelessSessionBean addMethod: (aMethod);
			addMethod: (FAMIXMethod new
				name: #anotherMethod;
				parentType: aStatelessSessionBean;
				signature: #anotherMethod asString;
				yourself
			).
	aStatefulSessionBean := FAMIXClass new
			name: #AStatefulSessionBean;
			container: aPackage;
			yourself.

	someMethod := FAMIXMethod new
				name: #someMethod;
				parentType: aStatelessSessionBean;
				signature: #someMethod asString;
				yourself.
	
	someOtherMethod := FAMIXMethod new
				name: #someOtherMethod;
				parentType: aStatelessSessionBean;
				signature: #someOtherMethod asString;
				yourself.
	
	aStatefulSessionBean
			addMethod: (someMethod);
			addMethod: (someOtherMethod).

	invocation := FAMIXInvocation new receiver: aMethod; addCandidate: someMethod ; yourself.
	aMethod addOutgoingInvocation: invocation.
	someMethod addIncomingInvocation: invocation.	

	mooseModel
		addAll: aStatelessSessionBean methods;
		addAll: aStatefulSessionBean methods;
		add: aPackage;
		add: anotherPackage;
		add: invocation;
		add: (FAMIXClass new
			name: #AStatelessSessionHome;
			container: aPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #AStatelessSession;
			container: aPackage;
			yourself
		);
		add: aStatelessSessionBean;
		add: (FAMIXClass new
			name: #AStatefulSessionHome;
			container: aPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #AStatefulSession;
			container: aPackage;
			yourself
		);
		add: aStatefulSessionBean;
		add: (FAMIXClass new
			name: #ACMPEntityHome;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #ACMPEntity;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #ACMPEntityBean;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #ACMPEntityPK;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #ABMPEntityHome;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #ABMPEntity;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #ABMPEntityBean;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #ABMPEntity;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #AMessageBean;
			container: aPackage;
			yourself
		).


	^mooseModel
]

{ #category : #testing }
JEETests >> sampleMooseModelWithTransAndQuery [
	
	| mooseModel aPackage anotherPackage aStatelessSessionBean aStatefulSessionBean invocation someMethod someOtherMethod aMethod class3 class4 method1 method2 method3 method4 invocation2 invocation3 invocation4 invocation5 methodThatExecute invocation6 |

	mooseModel := MooseModel new.
	aPackage := FAMIXNamespace new
			name: #aPackage;
			yourself.
	anotherPackage := FAMIXNamespace new
			name: #anotherPackage;
			yourself.

	aStatelessSessionBean := FAMIXClass new
			name: #AStatelessSessionBean;
			container: aPackage;
			yourself.

	aMethod := FAMIXMethod new
				name: #aMethod;
				parentType: aStatelessSessionBean;
				signature: #aMethod;
				yourself.

	aStatelessSessionBean addMethod: (aMethod);
			addMethod: (FAMIXMethod new
				name: #anotherMethod;
				parentType: aStatelessSessionBean;
				signature: #anotherMethod;
				yourself
			).
	aStatefulSessionBean := FAMIXClass new
			name: #AStatefulSessionBean;
			container: aPackage;
			yourself.

	someMethod := FAMIXMethod new
				name: #someMethod;
				parentType: aStatefulSessionBean;
				signature: #someMethod;
				yourself.

	methodThatExecute := FAMIXMethod new
						name: #executeBatch;
						parentType: aStatefulSessionBean;
						signature: #executeBatch;
						yourself.
	
	someOtherMethod := FAMIXMethod new
				name: #someOtherMethod;
				parentType: aStatefulSessionBean;
				signature: #someOtherMethod;
				yourself.

	aStatefulSessionBean
			addMethod: (someMethod);
			addMethod: (someOtherMethod);
			addMethod: (methodThatExecute).

	class3 := FAMIXClass new
			name: #Class3;
			container: aPackage;
			yourself.

	class4 := FAMIXClass new
			name: #Class4;
			container: aPackage;
			yourself.

	method1 := FAMIXMethod new
				name: #method1;
				parentType: class3;
				signature: #aMethod;
				yourself.
	
	method2 := FAMIXMethod new
				name: #method2;
				parentType: class3;
				ejbTransactionType: 'Required';
				signature: #aMethod;
				yourself.

	method3 := FAMIXMethod new
				name: #method3;
				parentType: class4;
				ejbTransactionType: 'Required';
				signature: #aMethod;
				yourself.

	method4 := FAMIXMethod new
				name: #method4;
				parentType: class4;
				signature: #aMethod;
				yourself.

	class3	addMethod: (method1);
			addMethod: (method2).

	class4	addMethod: (method3);
			addMethod: (method4).

	invocation := FAMIXInvocation new receiver: aMethod; addCandidate: someMethod ; signature: #someMethod ;yourself.
	aMethod addOutgoingInvocation: invocation.
	someMethod addIncomingInvocation: invocation.	

	invocation2 := FAMIXInvocation new receiver: method1; addCandidate: aMethod ; signature: #aMethod ;yourself.
	method1 addOutgoingInvocation: invocation2.
	aMethod addIncomingInvocation: invocation2.

	invocation3 := FAMIXInvocation new receiver: method2; addCandidate: aMethod ; signature: #aMethod ;yourself.
	method2 addOutgoingInvocation: invocation3.
	aMethod addIncomingInvocation: invocation3.

	invocation4 := FAMIXInvocation new receiver: method3; addCandidate: method1 ; signature: #method1 ;yourself.
	method3 addOutgoingInvocation: invocation4.
	method1 addIncomingInvocation: invocation4.

	invocation5 := FAMIXInvocation new receiver: method4; addCandidate: method2 ; signature: #method2 ;yourself.
	method4 addOutgoingInvocation: invocation5.
	method2 addIncomingInvocation: invocation5.

	"invocation to method that executes a queryes"
	invocation6 := FAMIXInvocation new receiver: someMethod; addCandidate: methodThatExecute ; signature: #executeBatch ;yourself.
	someMethod addOutgoingInvocation: invocation6.
	methodThatExecute addIncomingInvocation: invocation6.

	mooseModel
		addAll: aStatelessSessionBean methods;
		addAll: aStatefulSessionBean methods;
		addAll: class3 methods;
		addAll: class4 methods;
		add: aPackage;
		add: anotherPackage;
		add: invocation;
		add: invocation2;
		add: invocation3;
		add: invocation4;
		add: invocation5;
		add: (FAMIXClass new
			name: #AStatelessSessionHome;
			container: aPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #AStatelessSession;
			container: aPackage;
			yourself
		);
		add: aStatelessSessionBean;
		add: (FAMIXClass new
			name: #AStatefulSessionHome;
			container: aPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #AStatefulSession;
			container: aPackage;
			yourself
		);
		add: aStatefulSessionBean;
		add: (FAMIXClass new
			name: #ACMPEntityHome;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #ACMPEntity;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #ACMPEntityBean;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #ACMPEntityPK;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #ABMPEntityHome;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #ABMPEntity;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #ABMPEntityBean;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #ABMPEntity;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #AMessageBean;
			container: aPackage;
			yourself
		).

	^mooseModel
]

{ #category : #testing }
JEETests >> sampleMooseModelWithTransAndQueryAndBeans [
	
	| mooseModel aPackage anotherPackage aStatelessSessionBean aStatefulSessionBean invocation someMethod someOtherMethod aMethod class3 class4 method1 method2 method3 method4 invocation2 invocation3 invocation4 invocation5 methodThatExecute invocation6 class1 class2 class5 class6 inheritance |

	mooseModel := MooseModel new.
	aPackage := FAMIXNamespace new
			name: #aPackage;
			yourself.
	anotherPackage := FAMIXNamespace new
			name: #anotherPackage;
			yourself.

	aStatelessSessionBean := FAMIXClass new
			name: #AStatelessSessionBean;
			container: aPackage;
			yourself.

	aMethod := FAMIXMethod new
				name: #aMethod;
				parentType: aStatelessSessionBean;
				yourself.

	aStatelessSessionBean addMethod: (aMethod);
			addMethod: (FAMIXMethod new
				name: #anotherMethod;
				parentType: aStatelessSessionBean;
				yourself
			).
	aStatefulSessionBean := FAMIXClass new
			name: #AStatefulSessionBean;
			container: aPackage;
			yourself.

	someMethod := FAMIXMethod new
				name: #someMethod;
				parentType: aStatefulSessionBean;
				yourself.

	methodThatExecute := FAMIXMethod new
						name: #executeBatch;
						parentType: aStatefulSessionBean;
						yourself.
	
	someOtherMethod := FAMIXMethod new
				name: #someOtherMethod;
				parentType: aStatefulSessionBean;
				yourself.

	aStatefulSessionBean
			addMethod: (someMethod);
			addMethod: (someOtherMethod);
			addMethod: (methodThatExecute).

	class1 := FAMIXClass new
			name: #Class1;
			container: aPackage;
			yourself.
	class2 := FAMIXClass new
			name: #Class2;
			container: aPackage;
			yourself.
	class5 := FAMIXClass new
			name: #Class5;
			container: aPackage;
			yourself.
	class6 := FAMIXClass new
			name: #Class6;
			container: aPackage;
			yourself.

	class3 := FAMIXClass new
			name: #Class3;
			container: aPackage;
			yourself.

	inheritance := FAMIXInheritance new 
					superclass: class6; 
					subclass: class3.

	class3 addSuperInheritance: inheritance.
	class6 addSubInheritance: inheritance.

	class4 := FAMIXClass new
			name: #Class4;
			container: aPackage;
			yourself.

	method1 := FAMIXMethod new
				name: #method1;
				parentType: class3;
				yourself.
	
	method2 := FAMIXMethod new
				name: #method2;
				parentType: class3;
				ejbTransactionType: 'Required';
				yourself.

	method3 := FAMIXMethod new
				name: #method3;
				parentType: class4;
				ejbTransactionType: 'Required';
				yourself.

	method4 := FAMIXMethod new
				name: #method4;
				parentType: class4;
				yourself.

	class3	addMethod: (method1);
			addMethod: (method2).

	class4	addMethod: (method3);
			addMethod: (method4).

	invocation := FAMIXInvocation new sender: aMethod; addCandidate: someMethod ; signature: #someMethod ;yourself.
	aMethod addOutgoingInvocation: invocation.
	someMethod addIncomingInvocation: invocation.	

	invocation2 := FAMIXInvocation new sender: method1; addCandidate: aMethod ; signature: #aMethod ;yourself.
	method1 addOutgoingInvocation: invocation2.
	aMethod addIncomingInvocation: invocation2.

	invocation3 := FAMIXInvocation new sender: method2; addCandidate: aMethod ; signature: #aMethod ;yourself.
	method2 addOutgoingInvocation: invocation3.
	aMethod addIncomingInvocation: invocation3.

	invocation4 := FAMIXInvocation new sender: method3; addCandidate: method1 ; signature: #method1 ;yourself.
	method3 addOutgoingInvocation: invocation4.
	method1 addIncomingInvocation: invocation4.

	invocation5 := FAMIXInvocation new sender: method4; addCandidate: method2 ; signature: #method2 ;yourself.
	method4 addOutgoingInvocation: invocation5.
	method2 addIncomingInvocation: invocation5.

	"invocation to method that executes a queryes"
	invocation6 := FAMIXInvocation new sender: someMethod; addCandidate: methodThatExecute ; signature: #executeBatch ;yourself.
	someMethod addOutgoingInvocation: invocation6.
	methodThatExecute addIncomingInvocation: invocation6.

	mooseModel
		addAll: aStatelessSessionBean methods;
		addAll: aStatefulSessionBean methods;
		addAll: class3 methods;
		addAll: class4 methods;
		add: aPackage;
		add: anotherPackage;
		add: invocation;
		add: invocation2;
		add: invocation3;
		add: invocation4;
		add: invocation5;
		add: class1;
		add: class2;
		add: class3;
		add: class4;
		add: class5;
		add: class6;
		add: inheritance;
		add: (FAMIXClass new
			name: #AStatelessSessionHome;
			container: aPackage;
			yourself
		);
		add: (FAMIXSessionBean new
			name: #AStatelessSession;
			implementationClass: aStatelessSessionBean;
			yourself
		);
		add: aStatelessSessionBean;
		add: (FAMIXSessionBean new
			name: #AStatefulSessionHome;
			implementationClass: aStatefulSessionBean;
			yourself
		);
		add: (FAMIXSessionBean new
			name: #AStatefulSession;
			implementationClass: class3;
			yourself
		);
		add: aStatefulSessionBean;
		add: (FAMIXEntityBean new
			name: #ACMPEntityHome;
			implementationClass: class4;
			yourself
		);
		add: (FAMIXEntityBean new
			name: #ACMPEntity;
			implementationClass: class1;
			yourself
		);
		add: (FAMIXEntityBean new
			name: #ACMPEntityBean;
			implementationClass: class2;
			yourself
		);
		add: (FAMIXMessageDrivenBean new
			name: #ACMPMessagePK;
			implementationClass: class5;
			yourself
		);
		add: (FAMIXMessageDrivenBean new
			name: #ABMPMessageHome;
			implementationClass: class6;
			yourself
		);
		add: (FAMIXClass new
			name: #ABMPEntity;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #ABMPEntityBean;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #ABMPEntity;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #AMessageBean;
			container: aPackage;
			yourself
		).

	^mooseModel
]

{ #category : #testing }
JEETests >> sampleMooseModelWithTransAndQueryAndBeans2 [
	
	| mooseModel aPackage anotherPackage aStatelessSessionBean aStatefulSessionBean invocation someMethod someOtherMethod aMethod class3 class4 method1 method2 method3 method4 invocation2 invocation3 invocation4 invocation5 methodThatExecute invocation6 class1 class2 class5 class6 inheritance java sql prepareStatement |

	mooseModel := MooseModel new.
	aPackage := FAMIXNamespace new
			name: #aPackage;
			yourself.
	anotherPackage := FAMIXNamespace new
			name: #anotherPackage;
			yourself.

	java := FAMIXNamespace new
			name: #java;
			yourself.
	sql := FAMIXNamespace new
			name: #sql;
			container: java;
			yourself.
	prepareStatement := FAMIXClass new
						name: #prepareStatment;
						container: sql;
						yourself.
	methodThatExecute := FAMIXMethod new
							name: #executeBatch;
							parentType: prepareStatement;
							yourself.

	prepareStatement addMethod: (methodThatExecute).

	aStatelessSessionBean := FAMIXClass new
			name: #AStatelessSessionBean;
			container: aPackage;
			yourself.

	aMethod := FAMIXMethod new
				name: #aMethod;
				parentType: aStatelessSessionBean;
				yourself.

	aStatelessSessionBean addMethod: (aMethod);
			addMethod: (FAMIXMethod new
				name: #anotherMethod;
				parentType: aStatelessSessionBean;
				yourself
			).
	aStatefulSessionBean := FAMIXClass new
			name: #AStatefulSessionBean;
			container: aPackage;
			yourself.

	someMethod := FAMIXMethod new
				name: #someMethod;
				parentType: aStatefulSessionBean;
				yourself.

	methodThatExecute := FAMIXMethod new
						name: #executeBatch;
						parentType: aStatefulSessionBean;
						yourself.
	
	someOtherMethod := FAMIXMethod new
				name: #someOtherMethod;
				parentType: aStatefulSessionBean;
				yourself.

	aStatefulSessionBean
			addMethod: (someMethod);
			addMethod: (someOtherMethod).

	class1 := FAMIXClass new
			name: #Class1;
			container: aPackage;
			yourself.
	class2 := FAMIXClass new
			name: #Class2;
			container: aPackage;
			yourself.
	class5 := FAMIXClass new
			name: #Class5;
			container: aPackage;
			yourself.
	class6 := FAMIXClass new
			name: #Class6;
			container: aPackage;
			yourself.

	class3 := FAMIXClass new
			name: #Class3;
			container: aPackage;
			yourself.

	inheritance := FAMIXInheritance new 
					superclass: class6; 
					subclass: class3.

	class3 addSuperInheritance: inheritance.
	class6 addSubInheritance: inheritance.

	class4 := FAMIXClass new
			name: #Class4;
			container: aPackage;
			yourself.
	
	inheritance := FAMIXInheritance new 
					superclass: class2; 
					subclass: class4.

	class4 addSuperInheritance: inheritance.
	class2 addSubInheritance: inheritance.

	method1 := FAMIXMethod new
				name: #method1;
				parentType: class3;
				yourself.
	
	method2 := FAMIXMethod new
				name: #method2;
				parentType: class3;
				ejbTransactionType: 'Required';
				yourself.

	method3 := FAMIXMethod new
				name: #method3;
				parentType: class4;
				ejbTransactionType: 'Required';
				yourself.

	method4 := FAMIXMethod new
				name: #method4;
				parentType: class4;
				yourself.

	class3	addMethod: (method1);
			addMethod: (method2).

	class4	addMethod: (method3);
			addMethod: (method4).

	invocation := FAMIXInvocation new sender: aMethod; addCandidate: someMethod ; signature: #someMethod ;yourself.
	aMethod addOutgoingInvocation: invocation.
	someMethod addIncomingInvocation: invocation.	

	invocation2 := FAMIXInvocation new sender: method1; addCandidate: aMethod ; signature: #aMethod ;yourself.
	method1 addOutgoingInvocation: invocation2.
	aMethod addIncomingInvocation: invocation2.

	invocation3 := FAMIXInvocation new sender: method2; addCandidate: aMethod ; signature: #aMethod ;yourself.
	method2 addOutgoingInvocation: invocation3.
	aMethod addIncomingInvocation: invocation3.

	invocation4 := FAMIXInvocation new sender: method3; addCandidate: method1 ; signature: #method1 ;yourself.
	method3 addOutgoingInvocation: invocation4.
	method1 addIncomingInvocation: invocation4.

	invocation5 := FAMIXInvocation new sender: method4; addCandidate: method2 ; signature: #method2 ;yourself.
	method4 addOutgoingInvocation: invocation5.
	method2 addIncomingInvocation: invocation5.

	"invocation to method that executes a queryes"
	invocation6 := FAMIXInvocation new sender: someMethod; addCandidate: methodThatExecute ; signature: #executeBatch ;yourself.
	someMethod addOutgoingInvocation: invocation6.
	methodThatExecute addIncomingInvocation: invocation6.

	mooseModel
		addAll: aStatelessSessionBean methods;
		addAll: aStatefulSessionBean methods;
		addAll: class3 methods;
		addAll: class4 methods;
		add: aPackage;
		add: anotherPackage;
		addAll: prepareStatement methods;
		add: java;
		add: sql;	
		add: invocation;
		add: invocation2;
		add: invocation3;
		add: invocation4;
		add: invocation5;
		add: class1;
		add: class2;
		add: class3;
		add: class4;
		add: class5;
		add: class6;
		add: inheritance;
		add: prepareStatement;
		add: (FAMIXClass new
			name: #AStatelessSessionHome;
			container: aPackage;
			yourself
		);
		add: (FAMIXSessionBean new
			name: #AStatelessSession;
			implementationClass: aStatelessSessionBean;
			yourself
		);
		add: aStatelessSessionBean;
		add: (FAMIXSessionBean new
			name: #AStatefulSessionHome;
			implementationClass: aStatefulSessionBean;
			yourself
		);
		add: (FAMIXEntityBean new
			name: #AStatefulSession;
			implementationClass: class3;
			yourself
		);
		add: aStatefulSessionBean;
		add: (FAMIXSessionBean new
			name: #ACMPEntityHome;
			implementationClass: class6;
			yourself
		);
		add: (FAMIXEntityBean new
			name: #ACMPEntity;
			implementationClass: class1;
			yourself
		);
		add: (FAMIXEntityBean new
			name: #ACMPEntityBean;
			yourself
		);
		add: (FAMIXMessageDrivenBean new
			name: #ACMPMessagePK;
			implementationClass: class5;
			yourself
		);
		add: (FAMIXMessageDrivenBean new
			name: #ABMPMessageHome;
			implementationClass: class4;
			yourself
		);
		add: (FAMIXClass new
			name: #ABMPEntity;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #ABMPEntityBean;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #ABMPEntity;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #AMessageBean;
			container: aPackage;
			yourself
		).

	^mooseModel
]

{ #category : #testing }
JEETests >> sampleMooseModelWithTransAndQueryAndBeansAndHierarchi [
	
	| mooseModel aPackage anotherPackage aStatelessSessionBean aStatefulSessionBean invocation someMethod someOtherMethod aMethod class3 class4 method1 method2 method3 method4 invocation2 invocation3 invocation4 invocation5 methodThatExecute invocation6 class1 class2 class5 class6 inheritance java sql prepareStatement |

	mooseModel := MooseModel new.
	aPackage := FAMIXNamespace new
			name: #aPackage;
			yourself.
	anotherPackage := FAMIXNamespace new
			name: #anotherPackage;
			yourself.

	java := FAMIXNamespace new
			name: #java;
			yourself.
	sql := FAMIXNamespace new
			name: #sql;
			parentScope: java;
			yourself.
	prepareStatement := FAMIXClass new
						name: #prepareStatment;
						container: sql;
						yourself.
	methodThatExecute := FAMIXMethod new
							name: #executeBatch;
							parentType: prepareStatement;
							yourself.

	prepareStatement addMethod: (methodThatExecute).

	aStatelessSessionBean := FAMIXClass new
			name: #AStatelessSessionBean;
			container: aPackage;
			yourself.

	aMethod := FAMIXMethod new
				name: #aMethod;
				parentType: aStatelessSessionBean;
				yourself.

	aStatelessSessionBean addMethod: (aMethod);
			addMethod: (FAMIXMethod new
				name: #anotherMethod;
				parentType: aStatelessSessionBean;
				yourself
			).
	aStatefulSessionBean := FAMIXClass new
			name: #AStatefulSessionBean;
			container: aPackage;
			yourself.

	someMethod := FAMIXMethod new
				name: #someMethod;
				parentType: aStatefulSessionBean;
				yourself.

	methodThatExecute := FAMIXMethod new
						name: #executeBatch;
						parentType: aStatefulSessionBean;
						yourself.
	
	someOtherMethod := FAMIXMethod new
				name: #someOtherMethod;
				parentType: aStatefulSessionBean;
				yourself.

	aStatefulSessionBean
			addMethod: (someMethod);
			addMethod: (someOtherMethod).

	class1 := FAMIXClass new
			name: #Class1;
			container: aPackage;
			yourself.
	class2 := FAMIXClass new
			name: #Class2;
			container: aPackage;
			isInterface: true;
			yourself.
	class5 := FAMIXClass new
			name: #Class5;
			container: aPackage;
			yourself.
	class6 := FAMIXClass new
			name: #Class6;
			container: aPackage;
			isInterface: true;
			yourself.

	class3 := FAMIXClass new
			name: #Class3;
			container: aPackage;
			yourself.

	inheritance := FAMIXInheritance new 
					superclass: class6; 
					subclass: class3.

	class3 addSuperInheritance: inheritance.
	class6 addSubInheritance: inheritance.

	class4 := FAMIXClass new
			name: #Class4;
			container: aPackage;
			yourself.
	
	inheritance := FAMIXInheritance new 
					superclass: class2; 
					subclass: class4.

	class4 addSuperInheritance: inheritance.
	class2 addSubInheritance: inheritance.

	method1 := FAMIXMethod new
				name: #method1;
				parentType: class3;
				yourself.
	
	method2 := FAMIXMethod new
				name: #method2;
				parentType: class3;
				ejbTransactionType: 'Required';
				yourself.

	method3 := FAMIXMethod new
				name: #method3;
				parentType: class4;
				ejbTransactionType: 'Required';
				yourself.

	method4 := FAMIXMethod new
				name: #method4;
				parentType: class4;
				yourself.

	class3	addMethod: (method1);
			addMethod: (method2).

	class4	addMethod: (method3);
			addMethod: (method4).

	invocation := FAMIXInvocation new sender: aMethod; addCandidate: someMethod ; signature: #someMethod ;yourself.
	aMethod addOutgoingInvocation: invocation.
	someMethod addIncomingInvocation: invocation.	

	invocation2 := FAMIXInvocation new sender: method1; addCandidate: aMethod ; signature: #aMethod ;yourself.
	method1 addOutgoingInvocation: invocation2.
	aMethod addIncomingInvocation: invocation2.

	invocation3 := FAMIXInvocation new sender: method2; addCandidate: aMethod ; signature: #aMethod ;yourself.
	method2 addOutgoingInvocation: invocation3.
	aMethod addIncomingInvocation: invocation3.

	invocation4 := FAMIXInvocation new sender: method3; addCandidate: method1 ; signature: #method1 ;yourself.
	method3 addOutgoingInvocation: invocation4.
	method1 addIncomingInvocation: invocation4.

	invocation5 := FAMIXInvocation new sender: method4; addCandidate: method2 ; signature: #method2 ;yourself.
	method4 addOutgoingInvocation: invocation5.
	method2 addIncomingInvocation: invocation5.

	"invocation to method that executes a queryes"
	invocation6 := FAMIXInvocation new sender: someMethod; addCandidate: methodThatExecute ; signature: #executeBatch ;yourself.
	someMethod addOutgoingInvocation: invocation6.
	methodThatExecute addIncomingInvocation: invocation6.

	mooseModel
		addAll: aStatelessSessionBean methods;
		addAll: aStatefulSessionBean methods;
		addAll: class3 methods;
		addAll: class4 methods;
		add: aPackage;
		add: anotherPackage;
		addAll: prepareStatement methods;
		add: java;
		add: sql;	
		add: invocation;
		add: invocation2;
		add: invocation3;
		add: invocation4;
		add: invocation5;
		add: class1;
		add: class2;
		add: class3;
		add: class4;
		add: class5;
		add: class6;
		add: inheritance;
		add: prepareStatement;
		add: (FAMIXClass new
			name: #AStatelessSessionHome;
			container: aPackage;
			yourself
		);
		add: (FAMIXSessionBean new
			name: #AStatelessSession;
			implementationClass: aStatelessSessionBean;
			yourself
		);
		add: aStatelessSessionBean;
		add: (FAMIXSessionBean new
			name: #AStatefulSessionHome;
			implementationClass: aStatefulSessionBean;
			yourself
		);
		add: (FAMIXEntityBean new
			name: #AStatefulSession;
			implementationClass: class3;
			yourself
		);
		add: aStatefulSessionBean;
		add: (FAMIXSessionBean new
			name: #ACMPEntityHome;
			implementationClass: class6;
			yourself
		);
		add: (FAMIXEntityBean new
			name: #ACMPEntity;
			implementationClass: class1;
			yourself
		);
		add: (FAMIXEntityBean new
			name: #ACMPEntityBean;
			yourself
		);
		add: (FAMIXMessageDrivenBean new
			name: #ACMPMessagePK;
			implementationClass: class5;
			yourself
		);
		add: (FAMIXMessageDrivenBean new
			name: #ABMPMessageHome;
			implementationClass: class4;
			yourself
		);
		add: (FAMIXClass new
			name: #ABMPEntity;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #ABMPEntityBean;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #ABMPEntity;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #AMessageBean;
			container: aPackage;
			yourself
		).

	^mooseModel
]

{ #category : #testing }
JEETests >> sampleMooseModelWithTransAndQueryComplex [

	| mooseModel aPackage anotherPackage aStatelessSessionBean aStatefulSessionBean invocation someMethod someOtherMethod aMethod class3 class4 method1 method2 method3 method4 invocation2 invocation3 invocation4 invocation5 methodThatExecute method5 method6 method7 method9 method10 method11 method12 method13 method14 method8 invocation6 invocation7 invocation8 invocation9 invocation10 invocation11 invocation12 invocation13 invocation14 invocation15 invocation16 invocation17 invocation18 invocation19 |

	mooseModel := MooseModel new.

	aPackage := FAMIXNamespace new
				name: #aPackage;
				yourself.
	anotherPackage := FAMIXNamespace new
			name: #anotherPackage;
			yourself.

	aStatelessSessionBean := FAMIXClass new
			name: #AStatelessSessionBean;
			container: aPackage;
			yourself.

	aMethod := FAMIXMethod new
				name: #aMethod;
				parentType: aStatelessSessionBean;
				signature: #aMethod asString;	
				yourself.

	aStatelessSessionBean addMethod: (aMethod);
			addMethod: (FAMIXMethod new
				name: #anotherMethod;
				parentType: aStatelessSessionBean;
				signature: #anotherMethod asString;	
				yourself
			).
	aStatefulSessionBean := FAMIXClass new
			name: #AStatefulSessionBean;
			container: aPackage;
			yourself.

	someMethod := FAMIXMethod new
				name: #someMethod;
				parentType: aStatefulSessionBean;
				signature: #someMethod asString;	
				yourself.

	methodThatExecute := FAMIXMethod new
						name: #executeBatch;
						parentType: aStatefulSessionBean;
						signature: #executeBatch asString;	
						yourself.
	
	someOtherMethod := FAMIXMethod new
				name: #someOtherMethod;
				parentType: aStatefulSessionBean;
				signature: #someOtherMethod asString;	
				yourself.

	aStatefulSessionBean
			addMethod: (someMethod);
			addMethod: (someOtherMethod);
			addMethod: (methodThatExecute).

	class3 := FAMIXClass new
			name: #Class3;
			container: aPackage;
			yourself.

	method1 := FAMIXMethod new
				name: #method1;
				parentType: class3;
				signature: #method1 asString;	
				yourself.
	
	method2 := FAMIXMethod new
				name: #method2;
				parentType: class3;
				signature: #method2 asString;	
				yourself.

	method3 := FAMIXMethod new
				name: #method3;
				parentType: class3;
				signature: #method3 asString;	
				yourself.
				
	method4 := FAMIXMethod new
				name: #method4;
				parentType: class3;
				signature: #method4 asString;	
				yourself.

	method5 := FAMIXMethod new
				name: #method5;
				parentType: class3;
				signature: #method5 asString;	
				yourself.

	method6 := FAMIXMethod new
				name: #method6;
				parentType: class3;
				signature: #method6 asString;	
				yourself.

	method7 := FAMIXMethod new
				name: #method7;
				parentType: class3;
				signature: #method7 asString;	
				ejbTransactionType: 'Required';
				yourself.

	class3	addMethod: (method1);
			addMethod: (method2);
			addMethod: (method3);
			addMethod: (method4);
			addMethod: (method5);
			addMethod: (method6);
			addMethod: (method7).


	class4 := FAMIXClass new
			name: #Class4;
			container: aPackage;
			yourself.

	method8 := FAMIXMethod new
				name: #method8;
				parentType: class4;
				signature: #method8 asString;	
				ejbTransactionType: 'Required';
				yourself.
	
	method9 := FAMIXMethod new
				name: #method9;
				parentType: class4;
				signature: #method9 asString;	
				yourself.

	method10 := FAMIXMethod new
				name: #method10;
				parentType: class4;
				signature: #method10 asString;	
				yourself.
	method11 := FAMIXMethod new
				name: #method11;
				parentType: class4;
				signature: #method11 asString;	
				ejbTransactionType: 'Required';
				yourself.

	method12 := FAMIXMethod new
				name: #method12;
				parentType: class4;
				signature: #method12 asString;	
				yourself.

	method13 := FAMIXMethod new
				name: #method13;
				parentType: class4;
				signature: #method13 asString;	
				yourself.

	method14 := FAMIXMethod new
				name: #method14;
				parentType: class4;
				signature: #method14 asString;	
				ejbTransactionType: 'Required';
				yourself.

	class4	addMethod: (method8);
			addMethod: (method9);
			addMethod: (method10);
			addMethod: (method11);
			addMethod: (method12);
			addMethod: (method13);
			addMethod: (method14).

	"invocation to method that executes a queryes"
	invocation := FAMIXInvocation new sender: method1; addCandidate: methodThatExecute; signature: #executeBatch; yourself.
	method1 addOutgoingInvocation: invocation.
	methodThatExecute addIncomingInvocation: invocation.

	invocation2 := FAMIXInvocation new sender: method2; addCandidate: methodThatExecute; signature: #executeBatch; yourself.
	method2 addOutgoingInvocation: invocation2.
	methodThatExecute addIncomingInvocation: invocation2.

	invocation3 := FAMIXInvocation new sender: method3; addCandidate: methodThatExecute; signature: #executeBatch; yourself.
	method3 addOutgoingInvocation: invocation3.
	methodThatExecute addIncomingInvocation: invocation3.

	"other invocation"
	invocation4 := FAMIXInvocation new sender: method4; addCandidate: method1; signature: #method1; yourself.
	method4 addOutgoingInvocation: invocation4.
	method1 addIncomingInvocation: invocation4.

	invocation5 := FAMIXInvocation new sender: method5; addCandidate: method2 ; signature: #method2; yourself.
	method5 addOutgoingInvocation: invocation5.
	method2 addIncomingInvocation: invocation5.

	invocation6 := FAMIXInvocation new sender: method5; addCandidate: method6 ; signature: #method6; yourself.
	method5 addOutgoingInvocation: invocation6.
	method6 addIncomingInvocation: invocation6.

	invocation7 := FAMIXInvocation new sender: method6; addCandidate: method2 ; signature: #method2; yourself.
	method6 addOutgoingInvocation: invocation7.
	method2 addIncomingInvocation: invocation7.

	invocation8 := FAMIXInvocation new sender: method8; addCandidate: method4 ; signature: #method4; yourself.
	method8 addOutgoingInvocation: invocation8.
	method4 addIncomingInvocation: invocation8.

	invocation9 := FAMIXInvocation new sender: method9; addCandidate: method4 ; signature: #method4; yourself.
	method9 addOutgoingInvocation: invocation9.
	method4 addIncomingInvocation: invocation9.

	invocation10 := FAMIXInvocation new sender: method10; addCandidate: method6 ; signature: #method6; yourself.
	method10 addOutgoingInvocation: invocation10.
	method6 addIncomingInvocation: invocation10.

	invocation11 := FAMIXInvocation new sender: method11; addCandidate: method6 ; signature: #method6; yourself.
	method11 addOutgoingInvocation: invocation11.
	method6 addIncomingInvocation: invocation11.

	invocation12 := FAMIXInvocation new sender: method11; addCandidate: method1 ; signature: #method1; yourself.
	method11 addOutgoingInvocation: invocation12.
	method1 addIncomingInvocation: invocation12.

	invocation13 := FAMIXInvocation new sender: method14; addCandidate: method10 ; signature: #method10; yourself.
	method14 addOutgoingInvocation: invocation13.
	method10 addIncomingInvocation: invocation13.

	invocation14 := FAMIXInvocation new sender: method7; addCandidate: method3 ; signature: #method3 ;yourself.
	method7 addOutgoingInvocation: invocation14.
	method3 addIncomingInvocation: invocation14.

	invocation15 := FAMIXInvocation new sender: method12; addCandidate: method7 ; signature: #method7 ;yourself.
	method12 addOutgoingInvocation: invocation15.
	method7 addIncomingInvocation: invocation15.

	invocation16 := FAMIXInvocation new sender: method13; addCandidate: method7 ; signature: #method7 ;yourself.
	method13 addOutgoingInvocation: invocation16.
	method7 addIncomingInvocation: invocation16.

	"old invocations"
	invocation17 := FAMIXInvocation new sender: aMethod; addCandidate: someMethod ; signature: #someMethod ;yourself.
	aMethod addOutgoingInvocation: invocation17.
	someMethod addIncomingInvocation: invocation17.	

	invocation18 := FAMIXInvocation new sender: method1; addCandidate: aMethod ; signature: #aMethod ;yourself.
	method1 addOutgoingInvocation: invocation18.
	aMethod addIncomingInvocation: invocation18.

	invocation19 := FAMIXInvocation new sender: method2; addCandidate: aMethod ; signature: #aMethod ;yourself.
	method2 addOutgoingInvocation: invocation19.
	aMethod addIncomingInvocation: invocation19.


	mooseModel
		addAll: aStatelessSessionBean methods;
		addAll: aStatefulSessionBean methods;
		addAll: class3 methods;
		addAll: class4 methods;
		add: aPackage;
		add: anotherPackage;
		add: invocation;
		add: invocation2;
		add: invocation3;
		add: invocation4;
		add: invocation5;
		add: invocation6;
		add: invocation7;
		add: invocation8;
		add: invocation9;
		add: invocation10;
		add: invocation11;
		add: invocation12;
		add: invocation13;
		add: invocation14;
		add: invocation15;
		add: invocation16;
		add: invocation17;
		add: invocation18;
		add: invocation19;
		add: class3;
		add: class4;
		add: (FAMIXClass new
			name: #AStatelessSessionHome;
			container: aPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #AStatelessSession;
			container: aPackage;
			yourself
		);
		add: aStatelessSessionBean;
		add: (FAMIXClass new
			name: #AStatefulSessionHome;
			container: aPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #AStatefulSession;
			container: aPackage;
			yourself
		);
		add: aStatefulSessionBean;
		add: (FAMIXClass new
			name: #ACMPEntityHome;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #ACMPEntity;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #ACMPEntityBean;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #ACMPEntityPK;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #ABMPEntityHome;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #ABMPEntity;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #ABMPEntityBean;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #ABMPEntity;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #AMessageBean;
			container: aPackage;
			yourself
		).

	^mooseModel
]

{ #category : #testing }
JEETests >> sampleMooseModelWithTransAndQueryWithJavaAndFakeTransaction [

	| mooseModel aPackage anotherPackage aStatelessSessionBean aStatefulSessionBean invocation someMethod someOtherMethod aMethod class3 class4 method1 method2 method3 method4 invocation2 invocation3 invocation4 invocation5 methodThatExecute method5 method6 method7 method9 method10 method11 method12 method13 method14 method8 invocation6 invocation7 invocation8 invocation9 invocation10 invocation11 invocation12 invocation13 invocation14 invocation15 invocation16 invocation17 invocation18 invocation19 java sql prepareStatement |

	mooseModel := MooseModel new.

	aPackage := FAMIXNamespace new
			name: #aPackage;
			yourself.
	anotherPackage := FAMIXNamespace new
			name: #anotherPackage;
			yourself.

	java := FAMIXNamespace new
			name: #java;
			yourself.
	sql := FAMIXNamespace new
			name: #sql;
			parentScope: java;
			yourself.
	prepareStatement := FAMIXClass new
						name: #prepareStatment;
						container: sql;
						yourself.
	methodThatExecute := FAMIXMethod new
							name: #executeBatch;
							parentType: prepareStatement;
							signature: #executeBatch;
							yourself.

	prepareStatement addMethod: (methodThatExecute).

	aStatelessSessionBean := FAMIXClass new
			name: #AStatelessSessionBean;
			container: aPackage;
			yourself.

	aMethod := FAMIXMethod new
				name: #aMethod;
				parentType: aStatelessSessionBean;
				signature: #aMethod;
				yourself.

	aStatelessSessionBean addMethod: (aMethod);
			addMethod: (FAMIXMethod new
				name: #anotherMethod;
				parentType: aStatelessSessionBean;
				signature: #anotherMethod;
				yourself
			).
	aStatefulSessionBean := FAMIXClass new
			name: #AStatefulSessionBean;
			container: aPackage;
			yourself.

	someMethod := FAMIXMethod new
				name: #someMethod;
				parentType: aStatefulSessionBean;
				signature: #someMethod;
				yourself.

	someOtherMethod := FAMIXMethod new
				name: #someOtherMethod;
				parentType: aStatefulSessionBean;
				signature: #someOtherMethod;
				yourself.	

	aStatefulSessionBean
			addMethod: (someMethod);
			addMethod: (someOtherMethod).

	class3 := FAMIXClass new
			name: #Class3;
			container: aPackage;
			yourself.

	method1 := FAMIXMethod new
				name: #method1;
				parentType: class3;
				signature: #method1;
				yourself.
	
	method2 := FAMIXMethod new
				name: #method2;
				parentType: class3;
				signature: #method2;
				yourself.

	method3 := FAMIXMethod new
				name: #method3;
				parentType: class3;
				signature: #method3;
				ejbTransactionType: 'RequiresNew';
				yourself.

	method4 := FAMIXMethod new
				name: #method4;
				parentType: class3;
				signature: #method4;
				yourself.

	method5 := FAMIXMethod new
				name: #method5;
				parentType: class3;
				signature: #method5;
				yourself.

	method6 := FAMIXMethod new
				name: #method6;
				parentType: class3;
				ejbTransactionType: 'RequiresNew';
				signature: #method6;
				yourself.

	method7 := FAMIXMethod new
				name: #method7;
				parentType: class3;
				signature: #method7;
				ejbTransactionType: 'Required';
				yourself.

	class3	addMethod: (method1);
			addMethod: (method2);
			addMethod: (method3);
			addMethod: (method4);
			addMethod: (method5);
			addMethod: (method6);
			addMethod: (method7).


	class4 := FAMIXClass new
			name: #Class4;
			container: aPackage;
			yourself.

	method8 := FAMIXMethod new
				name: #method8;
				parentType: class4;
				ejbTransactionType: 'Required';
				signature: #method8;
				yourself.
	
	method9 := FAMIXMethod new
				name: #method9;
				parentType: class4;
				signature: #method9;
				yourself.

	method10 := FAMIXMethod new
				name: #method10;
				parentType: class4;
				signature: #method10;
				yourself.
	method11 := FAMIXMethod new
				name: #method11;
				parentType: class4;
				ejbTransactionType: 'Required';
				signature: #method11;
				yourself.

	method12 := FAMIXMethod new
				name: #method12;
				parentType: class4;
				signature: #method12;
				yourself.

	method13 := FAMIXMethod new
				name: #method13;
				parentType: class4;
				signature: #method13;
				yourself.

	method14 := FAMIXMethod new
				name: #method14;
				parentType: class4;
				ejbTransactionType: 'Required';
				signature: #method14;
				yourself.

	class4	addMethod: (method8);
			addMethod: (method9);
			addMethod: (method10);
			addMethod: (method11);
			addMethod: (method12);
			addMethod: (method13);
			addMethod: (method14).

	"invocation to method that executes a queryes"
	invocation := FAMIXInvocation new sender: method1; addCandidate: methodThatExecute; signature: #executeBatch; yourself.
	method1 addOutgoingInvocation: invocation.
	methodThatExecute addIncomingInvocation: invocation.

	invocation2 := FAMIXInvocation new sender: method2; addCandidate: methodThatExecute; signature: #executeBatch; yourself.
	method2 addOutgoingInvocation: invocation2.
	methodThatExecute addIncomingInvocation: invocation2.

	invocation3 := FAMIXInvocation new sender: method3; addCandidate: methodThatExecute; signature: #executeBatch; yourself.
	method3 addOutgoingInvocation: invocation3.
	methodThatExecute addIncomingInvocation: invocation3.

	"other invocation"
	invocation4 := FAMIXInvocation new sender: method4; addCandidate: method1; signature: #method1; yourself.
	method4 addOutgoingInvocation: invocation4.
	method1 addIncomingInvocation: invocation4.

	invocation5 := FAMIXInvocation new sender: method5; addCandidate: method2 ; signature: #method2; yourself.
	method5 addOutgoingInvocation: invocation5.
	method2 addIncomingInvocation: invocation5.

	invocation6 := FAMIXInvocation new sender: method5; addCandidate: method6 ; signature: #method6; yourself.
	method5 addOutgoingInvocation: invocation6.
	method6 addIncomingInvocation: invocation6.

	invocation7 := FAMIXInvocation new sender: method6; addCandidate: method2 ; signature: #method2; yourself.
	method6 addOutgoingInvocation: invocation7.
	method2 addIncomingInvocation: invocation7.

	invocation8 := FAMIXInvocation new sender: method8; addCandidate: method4 ; signature: #method4; yourself.
	method8 addOutgoingInvocation: invocation8.
	method4 addIncomingInvocation: invocation8.

	invocation9 := FAMIXInvocation new sender: method9; addCandidate: method4 ; signature: #method4; yourself.
	method9 addOutgoingInvocation: invocation9.
	method4 addIncomingInvocation: invocation9.

	invocation10 := FAMIXInvocation new sender: method10; addCandidate: method6 ; signature: #method6; yourself.
	method10 addOutgoingInvocation: invocation10.
	method6 addIncomingInvocation: invocation10.

	invocation11 := FAMIXInvocation new sender: method11; addCandidate: method6 ; signature: #method6; yourself.
	method11 addOutgoingInvocation: invocation11.
	method6 addIncomingInvocation: invocation11.

	invocation12 := FAMIXInvocation new sender: method11; addCandidate: method1 ; signature: #method1; yourself.
	method11 addOutgoingInvocation: invocation12.
	method1 addIncomingInvocation: invocation12.

	invocation13 := FAMIXInvocation new sender: method14; addCandidate: method10 ; signature: #method10; yourself.
	method14 addOutgoingInvocation: invocation13.
	method10 addIncomingInvocation: invocation13.

	invocation14 := FAMIXInvocation new sender: method7; addCandidate: method3 ; signature: #method3 ;yourself.
	method7 addOutgoingInvocation: invocation14.
	method3 addIncomingInvocation: invocation14.

	invocation15 := FAMIXInvocation new sender: method12; addCandidate: method7 ; signature: #method7 ;yourself.
	method12 addOutgoingInvocation: invocation15.
	method7 addIncomingInvocation: invocation15.

	invocation16 := FAMIXInvocation new sender: method13; addCandidate: method7 ; signature: #method7 ;yourself.
	method13 addOutgoingInvocation: invocation16.
	method7 addIncomingInvocation: invocation16.

	"old invocations"
	invocation17 := FAMIXInvocation new sender: aMethod; addCandidate: someMethod ; signature: #someMethod ;yourself.
	aMethod addOutgoingInvocation: invocation17.
	someMethod addIncomingInvocation: invocation17.	

	invocation18 := FAMIXInvocation new sender: method1; addCandidate: aMethod ; signature: #aMethod ;yourself.
	method1 addOutgoingInvocation: invocation18.
	aMethod addIncomingInvocation: invocation18.

	invocation19 := FAMIXInvocation new sender: method2; addCandidate: aMethod ; signature: #aMethod ;yourself.
	method2 addOutgoingInvocation: invocation19.
	aMethod addIncomingInvocation: invocation19.


	mooseModel
		addAll: aStatelessSessionBean methods;
		addAll: aStatefulSessionBean methods;
		addAll: class3 methods;
		addAll: class4 methods;
		addAll: prepareStatement methods;
		add: java;
		add: sql;
		add: aPackage;
		add: anotherPackage;
		add: invocation;
		add: invocation2;
		add: invocation3;
		add: invocation4;
		add: invocation5;
		add: invocation6;
		add: invocation7;
		add: invocation8;
		add: invocation9;
		add: invocation10;
		add: invocation11;
		add: invocation12;
		add: invocation13;
		add: invocation14;
		add: invocation15;
		add: invocation16;
		add: invocation17;
		add: invocation18;
		add: invocation19;
		add: class3;
		add: class4;
		add: prepareStatement;
		add: (FAMIXClass new
			name: #AStatelessSessionHome;
			container: aPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #AStatelessSession;
			container: aPackage;
			yourself
		);
		add: aStatelessSessionBean;
		add: (FAMIXClass new
			name: #AStatefulSessionHome;
			container: aPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #AStatefulSession;
			container: aPackage;
			yourself
		);
		add: aStatefulSessionBean;
		add: (FAMIXClass new
			name: #ACMPEntityHome;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #ACMPEntity;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #ACMPEntityBean;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #ACMPEntityPK;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #ABMPEntityHome;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #ABMPEntity;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #ABMPEntityBean;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #ABMPEntity;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #AMessageBean;
			container: aPackage;
			yourself
		).

	^mooseModel
]

{ #category : #testing }
JEETests >> sampleMooseModelWithTransAndQueryWithJavaFake [

	| mooseModel aPackage anotherPackage aStatelessSessionBean aStatefulSessionBean invocation someMethod someOtherMethod aMethod class3 class4 method1 method2 method3 method4 invocation2 invocation3 invocation4 invocation5 methodThatExecute method5 method6 method7 method9 method10 method11 method12 method13 method14 method8 invocation6 invocation7 invocation8 invocation9 invocation10 invocation11 invocation12 invocation13 invocation14 invocation15 invocation16 invocation17 invocation18 invocation19 java sql prepareStatement |

	mooseModel := MooseModel new.

	aPackage := FAMIXNamespace new
			name: #aPackage;
			yourself.
	anotherPackage := FAMIXNamespace new
			name: #anotherPackage;
			yourself.

	java := FAMIXNamespace new
			name: #java;
			yourself.
	sql := FAMIXNamespace new
			name: #sql;
			parentScope: java;
			yourself.
	prepareStatement := FAMIXClass new
						name: #prepareStatment;
						container: sql;
						yourself.
	methodThatExecute := FAMIXMethod new
							name: #executeBatch;
							parentType: prepareStatement;
							yourself.

	prepareStatement addMethod: (methodThatExecute).

	aStatelessSessionBean := FAMIXClass new
			name: #AStatelessSessionBean;
			container: aPackage;
			yourself.

	aMethod := FAMIXMethod new
				name: #aMethod;
				parentType: aStatelessSessionBean;
				yourself.

	aStatelessSessionBean addMethod: (aMethod);
			addMethod: (FAMIXMethod new
				name: #anotherMethod;
				parentType: aStatelessSessionBean;
				yourself
			).
	aStatefulSessionBean := FAMIXClass new
			name: #AStatefulSessionBean;
			container: aPackage;
			yourself.

	someMethod := FAMIXMethod new
				name: #someMethod;
				parentType: aStatefulSessionBean;
				yourself.

	someOtherMethod := FAMIXMethod new
				name: #someOtherMethod;
				parentType: aStatefulSessionBean;
				yourself.	

	aStatefulSessionBean
			addMethod: (someMethod);
			addMethod: (someOtherMethod).

	class3 := FAMIXClass new
			name: #Class3;
			container: aPackage;
			yourself.

	method1 := FAMIXMethod new
				name: #method1;
				parentType: class3;
				yourself.
	
	method2 := FAMIXMethod new
				name: #method2;
				parentType: class3;
				yourself.

	method3 := FAMIXMethod new
				name: #method3;
				parentType: class3;
				yourself.
	method4 := FAMIXMethod new
				name: #method4;
				parentType: class3;
				yourself.

	method5 := FAMIXMethod new
				name: #method5;
				parentType: class3;
				yourself.

	method6 := FAMIXMethod new
				name: #method6;
				parentType: class3;
				yourself.

	method7 := FAMIXMethod new
				name: #method7;
				parentType: class3;
				ejbTransactionType: 'Required';
				yourself.

	class3	addMethod: (method1);
			addMethod: (method2);
			addMethod: (method3);
			addMethod: (method4);
			addMethod: (method5);
			addMethod: (method6);
			addMethod: (method7).


	class4 := FAMIXClass new
			name: #Class4;
			container: aPackage;
			yourself.

	method8 := FAMIXMethod new
				name: #method8;
				parentType: class4;
				ejbTransactionType: 'Required';
				yourself.
	
	method9 := FAMIXMethod new
				name: #method9;
				parentType: class4;
				yourself.

	method10 := FAMIXMethod new
				name: #method10;
				parentType: class4;
				yourself.
	method11 := FAMIXMethod new
				name: #method11;
				parentType: class4;
				ejbTransactionType: 'Required';
				yourself.

	method12 := FAMIXMethod new
				name: #method12;
				parentType: class4;
				yourself.

	method13 := FAMIXMethod new
				name: #method13;
				parentType: class4;
				yourself.

	method14 := FAMIXMethod new
				name: #method14;
				parentType: class4;
				ejbTransactionType: 'Required';
				yourself.

	class4	addMethod: (method8);
			addMethod: (method9);
			addMethod: (method10);
			addMethod: (method11);
			addMethod: (method12);
			addMethod: (method13);
			addMethod: (method14).

	"invocation to method that executes a queryes"
	invocation := FAMIXInvocation new sender: method1; addCandidate: methodThatExecute; signature: #executeBatch; yourself.
	method1 addOutgoingInvocation: invocation.
	methodThatExecute addIncomingInvocation: invocation.

	invocation2 := FAMIXInvocation new sender: method2; addCandidate: methodThatExecute; signature: #executeBatch; yourself.
	method2 addOutgoingInvocation: invocation2.
	methodThatExecute addIncomingInvocation: invocation2.

	invocation3 := FAMIXInvocation new sender: method3; addCandidate: methodThatExecute; signature: #executeBatch; yourself.
	method3 addOutgoingInvocation: invocation3.
	methodThatExecute addIncomingInvocation: invocation3.

	"other invocation"
	invocation4 := FAMIXInvocation new sender: method4; addCandidate: method1; signature: #method1; yourself.
	method4 addOutgoingInvocation: invocation4.
	method1 addIncomingInvocation: invocation4.

	invocation5 := FAMIXInvocation new sender: method5; addCandidate: method2 ; signature: #method2; yourself.
	method5 addOutgoingInvocation: invocation5.
	method2 addIncomingInvocation: invocation5.

	invocation6 := FAMIXInvocation new sender: method5; addCandidate: method6 ; signature: #method6; yourself.
	method5 addOutgoingInvocation: invocation6.
	method6 addIncomingInvocation: invocation6.

	invocation7 := FAMIXInvocation new sender: method6; addCandidate: method2 ; signature: #method2; yourself.
	method6 addOutgoingInvocation: invocation7.
	method2 addIncomingInvocation: invocation7.

	invocation8 := FAMIXInvocation new sender: method8; addCandidate: method4 ; signature: #method4; yourself.
	method8 addOutgoingInvocation: invocation8.
	method4 addIncomingInvocation: invocation8.

	invocation9 := FAMIXInvocation new sender: method9; addCandidate: method4 ; signature: #method4; yourself.
	method9 addOutgoingInvocation: invocation9.
	method4 addIncomingInvocation: invocation9.

	invocation10 := FAMIXInvocation new sender: method10; addCandidate: method6 ; signature: #method6; yourself.
	method10 addOutgoingInvocation: invocation10.
	method6 addIncomingInvocation: invocation10.

	invocation11 := FAMIXInvocation new sender: method11; addCandidate: method6 ; signature: #method6; yourself.
	method11 addOutgoingInvocation: invocation11.
	method6 addIncomingInvocation: invocation11.

	invocation12 := FAMIXInvocation new sender: method11; addCandidate: method1 ; signature: #method1; yourself.
	method11 addOutgoingInvocation: invocation12.
	method1 addIncomingInvocation: invocation12.

	invocation13 := FAMIXInvocation new sender: method14; addCandidate: method10 ; signature: #method10; yourself.
	method14 addOutgoingInvocation: invocation13.
	method10 addIncomingInvocation: invocation13.

	invocation14 := FAMIXInvocation new sender: method7; addCandidate: method3 ; signature: #method3 ;yourself.
	method7 addOutgoingInvocation: invocation14.
	method3 addIncomingInvocation: invocation14.

	invocation15 := FAMIXInvocation new sender: method12; addCandidate: method7 ; signature: #method7 ;yourself.
	method12 addOutgoingInvocation: invocation15.
	method7 addIncomingInvocation: invocation15.

	invocation16 := FAMIXInvocation new sender: method13; addCandidate: method7 ; signature: #method7 ;yourself.
	method13 addOutgoingInvocation: invocation16.
	method7 addIncomingInvocation: invocation16.

	"old invocations"
	invocation17 := FAMIXInvocation new sender: aMethod; addCandidate: someMethod ; signature: #someMethod ;yourself.
	aMethod addOutgoingInvocation: invocation17.
	someMethod addIncomingInvocation: invocation17.	

	invocation18 := FAMIXInvocation new sender: method1; addCandidate: aMethod ; signature: #aMethod ;yourself.
	method1 addOutgoingInvocation: invocation18.
	aMethod addIncomingInvocation: invocation18.

	invocation19 := FAMIXInvocation new sender: method2; addCandidate: aMethod ; signature: #aMethod ;yourself.
	method2 addOutgoingInvocation: invocation19.
	aMethod addIncomingInvocation: invocation19.


	mooseModel
		addAll: aStatelessSessionBean methods;
		addAll: aStatefulSessionBean methods;
		addAll: class3 methods;
		addAll: class4 methods;
		addAll: prepareStatement methods;
		add: java;
		add: sql;
		add: aPackage;
		add: anotherPackage;
		add: invocation;
		add: invocation2;
		add: invocation3;
		add: invocation4;
		add: invocation5;
		add: invocation6;
		add: invocation7;
		add: invocation8;
		add: invocation9;
		add: invocation10;
		add: invocation11;
		add: invocation12;
		add: invocation13;
		add: invocation14;
		add: invocation15;
		add: invocation16;
		add: invocation17;
		add: invocation18;
		add: invocation19;
		add: class3;
		add: class4;
		add: prepareStatement;
		add: (FAMIXClass new
			name: #AStatelessSessionHome;
			container: aPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #AStatelessSession;
			container: aPackage;
			yourself
		);
		add: aStatelessSessionBean;
		add: (FAMIXClass new
			name: #AStatefulSessionHome;
			container: aPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #AStatefulSession;
			container: aPackage;
			yourself
		);
		add: aStatefulSessionBean;
		add: (FAMIXClass new
			name: #ACMPEntityHome;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #ACMPEntity;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #ACMPEntityBean;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #ACMPEntityPK;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #ABMPEntityHome;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #ABMPEntity;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #ABMPEntityBean;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #ABMPEntity;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #AMessageBean;
			container: aPackage;
			yourself
		).

	^mooseModel
]

{ #category : #testing }
JEETests >> sampleMooseModelWithTransaction [
	
	| mooseModel aPackage anotherPackage aStatelessSessionBean aStatefulSessionBean invocation someMethod someOtherMethod aMethod class3 class4 method1 method2 method3 method4 invocation2 invocation3 invocation4 invocation5 |

	mooseModel := MooseModel new.
	aPackage := FAMIXNamespace new
			name: #aPackage;
			yourself.
	anotherPackage := FAMIXNamespace new
			name: #anotherPackage;
			yourself.

	aStatelessSessionBean := FAMIXClass new
			name: #AStatelessSessionBean;
			container: aPackage;
			yourself.

	aMethod := FAMIXMethod new
				name: #aMethod;
				parentType: aStatelessSessionBean;
				signature: #aMethod;
				yourself.

	aStatelessSessionBean addMethod: (aMethod);
			addMethod: (FAMIXMethod new
				name: #anotherMethod;
				parentType: aStatelessSessionBean;
				signature: #anotherMethod;
				yourself
			).
	aStatefulSessionBean := FAMIXClass new
			name: #AStatefulSessionBean;
			container: aPackage;
			yourself.

	someMethod := FAMIXMethod new
				name: #someMethod;
				parentType: aStatelessSessionBean;
				signature: #someMethod;
				yourself.
	
	someOtherMethod := FAMIXMethod new
				name: #someOtherMethod;
				parentType: aStatelessSessionBean;
				signature: #someOtherMethod;
				yourself.
	
	aStatefulSessionBean
			addMethod: (someMethod);
			addMethod: (someOtherMethod).

	class3 := FAMIXClass new
			name: #Class3;
			container: aPackage;
			yourself.

	class4 := FAMIXClass new
			name: #Class4;
			container: aPackage;
			yourself.

	method1 := FAMIXMethod new
				name: #method1;
				parentType: class3;
				signature: #method1;
				yourself.
	
	method2 := FAMIXMethod new
				name: #method2;
				parentType: class3;
				signature: #method2;
				ejbTransactionType: 'Required';
				yourself.

	method3 := FAMIXMethod new
				name: #method3;
				parentType: class4;
				signature: #method3;
				ejbTransactionType: 'Required';
				yourself.

	method4 := FAMIXMethod new
				name: #method4;
				parentType: class4;
				signature: #method4;
				yourself.

	class3	addMethod: (method1);
			addMethod: (method2).

	class4	addMethod: (method3);
			addMethod: (method4).

	invocation := FAMIXInvocation new receiver: aMethod; addCandidate: someMethod ; signature: #someMethod ;yourself.
	aMethod addOutgoingInvocation: invocation.
	someMethod addIncomingInvocation: invocation.	

	invocation2 := FAMIXInvocation new receiver: method1; addCandidate: aMethod ; signature: #aMethod ;yourself.
	method1 addOutgoingInvocation: invocation2.
	aMethod addIncomingInvocation: invocation2.

	invocation3 := FAMIXInvocation new receiver: method2; addCandidate: aMethod ; signature: #aMethod ;yourself.
	method2 addOutgoingInvocation: invocation3.
	aMethod addIncomingInvocation: invocation3.

	invocation4 := FAMIXInvocation new receiver: method3; addCandidate: method1 ; signature: #method1 ;yourself.
	method3 addOutgoingInvocation: invocation4.
	method1 addIncomingInvocation: invocation4.

	invocation5 := FAMIXInvocation new receiver: method4; addCandidate: method2 ; signature: #method2 ;yourself.
	method4 addOutgoingInvocation: invocation5.
	method2 addIncomingInvocation: invocation5.

	mooseModel
		addAll: aStatelessSessionBean methods;
		addAll: aStatefulSessionBean methods;
		addAll: class3 methods;
		addAll: class4 methods;
		add: aPackage;
		add: anotherPackage;
		add: invocation;
		add: invocation2;
		add: invocation3;
		add: invocation4;
		add: invocation5;
		add: (FAMIXClass new
			name: #AStatelessSessionHome;
			container: aPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #AStatelessSession;
			container: aPackage;
			yourself
		);
		add: aStatelessSessionBean;
		add: (FAMIXClass new
			name: #AStatefulSessionHome;
			container: aPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #AStatefulSession;
			container: aPackage;
			yourself
		);
		add: aStatefulSessionBean;
		add: (FAMIXClass new
			name: #ACMPEntityHome;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #ACMPEntity;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #ACMPEntityBean;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #ACMPEntityPK;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #ABMPEntityHome;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #ABMPEntity;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #ABMPEntityBean;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #ABMPEntity;
			container: anotherPackage;
			yourself
		);
		add: (FAMIXClass new
			name: #AMessageBean;
			container: aPackage;
			yourself
		).

	^mooseModel
]

{ #category : #testing }
JEETests >> setUp [
	| parser |
	parser := OPOpaxHandler on: self minimalEjbJar readStream.
	parser startDocument.
	parser parseDocument.
	root := parser stack first.

]

{ #category : #testing }
JEETests >> testAllInvocationsBetweenHereToAnotherMethod [

	| mooseModel method anotherMethod |

	mooseModel := self sampleMooseModelWithTransAndQueryComplex.
	
	method := ( mooseModel allMethods select: [ :each | each name = #method6 ] ) at: 1.
	anotherMethod := ( mooseModel allMethods select: [ :each | each name = #executeBatch ] ) at: 1.

	self assert: ( ( method allInvocationsBetweenHereTo: anotherMethod ) isKindOf: OrderedCollection ).
	self assert: ( ( method allInvocationsBetweenHereTo: anotherMethod ) size = 2 ).

	method := ( mooseModel allMethods select: [ :each | each name = #method13 ] ) at: 1.
	anotherMethod := ( mooseModel allMethods select: [ :each | each name = #method6 ] ) at: 1.

	self assert: ( ( method allInvocationsBetweenHereTo: anotherMethod ) isKindOf: OrderedCollection ).
	self assert: ( ( method allInvocationsBetweenHereTo: anotherMethod ) size = 0 ).

	method := ( mooseModel allMethods select: [ :each | each name = #method12 ] ) at: 1.
	anotherMethod := ( mooseModel allMethods select: [ :each | each name = #method3 ] ) at: 1.

	self assert: ( ( method allInvocationsBetweenHereTo: anotherMethod ) isKindOf: OrderedCollection ).
	self assert: ( ( method allInvocationsBetweenHereTo: anotherMethod ) size = 2 ).

	method := ( mooseModel allMethods select: [ :each | each name = #method11 ] ) at: 1.
	anotherMethod := ( mooseModel allMethods select: [ :each | each name = #aMethod ] ) at: 1.

	self assert: ( ( method allInvocationsBetweenHereTo: anotherMethod ) isKindOf: OrderedCollection ).
	self assert: ( ( method allInvocationsBetweenHereTo: anotherMethod ) size = 5 ).

	method := ( mooseModel allMethods select: [ :each | each name = #aMethod ] ) at: 1.
	anotherMethod := ( mooseModel allMethods select: [ :each | each name = #method11 ] ) at: 1.

	self assert: ( ( method allInvocationsBetweenHereTo: anotherMethod ) isKindOf: OrderedCollection ).
	self assert: ( ( method allInvocationsBetweenHereTo: anotherMethod ) size = 5 ).
]

{ #category : #testing }
JEETests >> testCompleteHierarchyInWhichThisResides [
	
	
	" I will fill MethodToAnalyze with all the methods that are part of a methods invokations chain that don't have a method that start a transaction"
	| allMethods interestingClasses mooseModel |

	mooseModel := self sampleMooseModelWithTransAndQueryComplex.
	allMethods := ( ( ( mooseModel allClasses ) flatCollect: [:each | each methods] ) select: #hasEJBTransactionAttribute ) deepCalledMethods.

	"selecting just the classes that contained methods under analysis and the hierarchy that contain those classes."
	interestingClasses := OrderedCollection new addAll: ( ( mooseModel allClasses select: [ :eachClass | (eachClass methods intersection: allMethods) notEmpty ] ) collect: [ :each | each completeHierarchyInWhichThisResides ] ) .
	
	self assert: (interestingClasses size = 4).
]

{ #category : #testing }
JEETests >> testCompleteHierarchyInWhichThisResides2 [
	
	
	" I will fill MethodToAnalyze with all the methods that are part of a methods invokations chain that don't have a method that start a transaction"
	| allMethods interestingClasses mooseModel |

	mooseModel := self sampleMooseModelWithTransAndQueryComplex.
	allMethods := ( FAMIXMethodGroup new ) addAll: ( ( ( ( mooseModel allClasses ) flatCollect: [:class | class methods]) select: #hasEJBTransactionAttribute ) deepCalledMethods ) .

	"selecting just the classes that contained methods under analysis and the hierarchy that contain those classes."
	interestingClasses := ( OrderedCollection new addAll: ( (  mooseModel allClasses select: [ :eachClass | (eachClass methods intersection: allMethods) notEmpty ] ) ) ) collect: [ :each | each completeHierarchyInWhichThisResides ].

	self assert: (interestingClasses size = 4).
]

{ #category : #testing }
JEETests >> testCompleteHierarchyInWhichThisResides3 [
	
	
	" I will fill MethodToAnalyze with all the methods that are part of a methods invokations chain that don't have a method that start a transaction"
	| allMethods interestingClasses mooseModel |

	mooseModel := self sampleMooseModelWithTransAndQueryComplex.
	allMethods := ( FAMIXMethodGroup new ) addAll: ( ( ( ( mooseModel allClasses ) flatCollect: [:class | class methods] ) select: #hasEJBTransactionAttribute ) deepCalledMethods ) .

	"selecting just the classes that contained methods under analysis and the hierarchy that contain those classes."
	interestingClasses := FAMIXClassGroup new addAll: ( ( (  mooseModel allClasses select: [ :eachClass | (eachClass methods intersection: allMethods) notEmpty ] ) ) collect: [ :each | each completeHierarchyInWhichThisResides ] ).

	self assert: (interestingClasses size = 4).
]

{ #category : #testing }
JEETests >> testCompleteHierarchyInWhichThisResidesRight [
	| mooseModel |

	mooseModel := self sampleMooseModelWithTransAndQueryAndBeans.
	self assert: ( ( ( ( mooseModel allClasses select: [:each | each name = #'Class3' ] ) at: 1 ) completeHierarchyInWhichThisResides ) size = 2 ).
	self assert: ( ( ( ( mooseModel allClasses select: [:each | each name = #'Class6' ] ) at: 1 ) completeHierarchyInWhichThisResides ) size = 2 ).

	mooseModel := self sampleMooseModelWithTransAndQueryWithJavaAndFakeTransaction.
	self assert: ( ( ( ( mooseModel allClasses select: [:each | each name = #'Class3' ] ) at: 1 ) completeHierarchyInWhichThisResides ) size = 1 ).
]

{ #category : #testing }
JEETests >> testDeepCalledMethods [
	
	
	" I will fill MethodToAnalyze with all the methods that are part of a methods invokations chain that don't have a method that start a transaction"
	| allMethods interestingClasses mooseModel |

	mooseModel := self sampleMooseModelWithTransAndQueryComplex.
	allMethods := ( FAMIXMethodGroup new ) addAll: ( ( ( ( mooseModel allClasses ) flatCollect: [:class | class methods ] ) select: #hasEJBTransactionAttribute ) deepCalledMethods ) .

	"selecting just the classes that contained methods under analysis and the hierarchy that contain those classes."
	interestingClasses := FAMIXClassGroup new addAll: ( ( (  mooseModel allClasses select: [ :eachClass | (eachClass methods intersection: allMethods) notEmpty ] ) ) collect: [ :each | each completeHierarchyInWhichThisResides ] ).

	self assert: (interestingClasses size = 4).
]

{ #category : #testing }
JEETests >> testDeepCalledMethods2 [
	
	| mooseModel  invocation MG |
	mooseModel := self sampleMooseModelWithTransAndQueryComplex.
	invocation := OrderedCollection new.
	MG := FAMIXMethodGroup new.

	mooseModel allMethods do: [:each | each hasEJBTransactionAttribute ifTrue: [ MG add: each ] ].
	invocation addAll: ( MG deepCalledMethods ). 
	
	self assert: ( invocation isKindOf: OrderedCollection ).
	self assert: ( invocation size = 13 ).
]

{ #category : #testing }
JEETests >> testDoesCall [

	| mooseModel  methods |
	mooseModel := self sampleMooseModelWithTransaction.
	methods := mooseModel allMethods.

	self assert: ( methods isKindOf: FAMIXMethodGroup ).
	self assert: ( methods size = 8 ).
	
	self assert: ( ( methods detect: [ :method | method name = #aMethod ] ) doesCall: #someMethod ).
	self assert: ( ( methods detect: [ :method | method name = #method2 ] ) doesCall: #aMethod ).
	self assert: ( ( methods detect: [ :method | method name = #method1 ] ) doesCall: #aMethod ).
	self assert: ( ( methods detect: [ :method | method name = #method3 ] ) doesCall: #method1 ).
	self assert: ( ( methods detect: [ :method | method name = #method4 ] ) doesCall: #method2 ).
]

{ #category : #testing }
JEETests >> testDoesImplements [
	
	| mooseModel |
	mooseModel := self sampleMooseModelWithTransAndQueryAndBeansAndHierarchi.
	
	
	self assert: ( ( ( mooseModel allClasses select: [:each | each name = #Class3 ] ) at: 1 ) doesImplements: #Class6 ).
	self assert: ( ( ( mooseModel allClasses select: [:each | each name = #Class4 ] ) at: 1 ) doesImplements: #Class2 ).
]

{ #category : #testing }
JEETests >> testElementCreation [

	self assert: (root allChildren select: [:each | each isMemberOf: EntityElement ]) size = 2.
	self assert: (root allChildren select: [:each | each isMemberOf: SessionElement ]) size = 2.
	self assert: (root allChildren select: [:each | each isMemberOf: ContainerTransactionElement ]) size = 3.
	self assert: (root allChildren select: [:each | each isMemberOf:  MessageDrivenElement ]) size = 1.
]

{ #category : #testing }
JEETests >> testEntityResolving [
	
	| mooseModel aBean |
	mooseModel := self sampleMooseModel.

	(root allChildren select: [:each | each class = EntityElement ]) do: [:each | each populate: mooseModel].

	self assert: mooseModel allEntityBeans size = 2.
	self assert: (mooseModel allEntityBeans contains: [:each | each name = #ACMPEntity]).
	self assert: (mooseModel allEntityBeans contains: [:each | each name = #ABMPEntity]).

	aBean := mooseModel allEntityBeans detect: [:each | each name = #ACMPEntity].
	self assert: aBean homeInterface notNil.
	self assert: aBean homeInterface parentEJBBean = aBean.
	self assert: aBean remoteInterface notNil.
	self assert: aBean remoteInterface parentEJBBean = aBean.
	self assert: aBean implementationClass notNil.
	self assert: aBean implementationClass parentEJBBean = aBean.
	self assert: aBean isCMP.
	self assert: aBean primaryKeyClass notNil.

	aBean := mooseModel allEntityBeans detect: [:each | each name = #ABMPEntity].
	self assert: aBean homeInterface notNil.
	self assert: aBean remoteInterface notNil.
	self assert: aBean implementationClass notNil.
	self assert: aBean isBMP.
	self assert: aBean primaryKeyClass isNil.
]

{ #category : #testing }
JEETests >> testExecuteAQuery [

	| mooseModel  methods temp |
	" mooseModel := self sampleMooseModel3. "
	mooseModel := self sampleMooseModelWithTransAndQuery.
	
	methods := mooseModel allMethods.

	self assert: ( methods isKindOf: FAMIXMethodGroup ).
	self assert: ( methods size = 9 ).

	self deny: (methods detect: [ :method | method name = #aMethod]) doesExecuteAQuery.
	self deny: ( methods detect: [:method | method name = #anotherMethod] ) doesExecuteAQuery.

	self assert: (methods detect: [ :method | method name = #someMethod ] ) doesExecuteAQuery.

	self deny:  (methods detect: [ :method | method name = #someOtherMethod ] ) doesExecuteAQuery.

	methods do: [ :method | method name = #method1 ifTrue: [ temp := ( method doesExecuteAQuery ) ] ].
	self deny: ( temp ).
	methods do: [ :method | method name = #method2 ifTrue: [ temp := ( method doesExecuteAQuery ) ] ].
	self deny: ( temp ).
	methods do: [ :method | method name = #method3 ifTrue: [ temp := ( method doesExecuteAQuery ) ] ].
	self deny: ( temp ).
	methods do: [ :method | method name = #method4 ifTrue: [ temp := ( method doesExecuteAQuery ) ] ].
	self deny: ( temp ).
]

{ #category : #testing }
JEETests >> testFAMIXMethodDeepCalledMethods [
	

	| mooseModel  allMethods methods |
	mooseModel := self sampleMooseModelWithTransAndQueryComplex.
	
	allMethods := ( mooseModel allMethods select: #hasEJBTransactionAttribute ) deepCalledMethods.
	methods := OrderedCollection withAll: ( mooseModel allMethods select: #hasEJBTransactionAttribute ).
	methods := methods flatCollect: [:each | each deepCalledMethods ].

	self assert: ( methods isKindOf: OrderedCollection ).
	self assert: ( methods size = 23 ).
	self assert: ( methods asSet asOrderedCollection size = 13 ).
	self assert: (allMethods isKindOf: OrderedCollection ).
	self assert: (allMethods size = 13 ).
]

{ #category : #testing }
JEETests >> testFAMIXMethodDeepCalleeMethods [

	| mooseModel  allMethods methods |
	mooseModel := self sampleMooseModelWithTransAndQueryComplex.
	
	allMethods := ( mooseModel allMethods select: #doesExecuteAQuery ) deepCalleeMethods.
	methods := OrderedCollection withAll: ( mooseModel allMethods select: #doesExecuteAQuery ).
	methods := methods flatCollect: [:each | each deepCalleeMethods ].

	self assert: (allMethods size = 14 ).
	self assert: (methods size = 15 ).
	self assert: (methods asSet size = 14 ).
]

{ #category : #testing }
JEETests >> testFAMIXMethodDeepCalleeMethodsWithoutTransactionPath [

	| mooseModel  |
	mooseModel := self sampleMooseModelWithTransAndQueryComplex.

	self assert: ( ( mooseModel allMethods select: [:each | each name = #executeBatch ] ) first deepCalleeMethodsWithoutTransactionPath ) size = 7.
]

{ #category : #testing }
JEETests >> testHasImplementsABean [

	| mooseModel allImplementingClasses |
	mooseModel := self sampleMooseModelWithTransAndQueryAndBeans.
	
	self assert: ( mooseModel allJEEBeans size = 8 ).
	self assert: ( ( mooseModel allClasses select: [:each | each hasImplementsABean ] ) size = 8 ).
	allImplementingClasses := mooseModel allClasses select: [:each | each hasImplementsABean ].
	self assert: ( ( mooseModel allJEEBeans select: [:bean | allImplementingClasses includes: bean implementationClass ] ) size = 8 ).


	mooseModel := self sampleMooseModelWithTransaction.
	
	self assert: ( mooseModel allJEEBeans size = 0 ).
	self assert: ( ( mooseModel allClasses select: [:each | each hasImplementsABean ] ) size = 0 ).
]

{ #category : #testing }
JEETests >> testHasImplementsAMessageDrivenBean [

	| mooseModel allImplementingClasses |
	mooseModel := self sampleMooseModelWithTransAndQueryAndBeans.
	
	self assert: ( mooseModel allMessageDrivenBeans size = 2 ).
	self assert: ( ( mooseModel allClasses select: [:each | each hasImplementsAMessageDrivenBean ] ) size = 2 ).
	allImplementingClasses := mooseModel allClasses select: [:each | each hasImplementsAMessageDrivenBean ].
	self assert: ( ( mooseModel allJEEBeans select: [:bean | allImplementingClasses includes: bean implementationClass ] ) size = 2 ).


	mooseModel := self sampleMooseModelWithTransaction.
	
	self assert: ( mooseModel allMessageDrivenBeans size = 0 ).
	self assert: ( ( mooseModel allClasses select: [:each | each hasImplementsAMessageDrivenBean ] ) size = 0 ).
]

{ #category : #testing }
JEETests >> testHasImplementsASessionBean [

	| mooseModel allImplementingClasses |
	mooseModel := self sampleMooseModelWithTransAndQueryAndBeans.
	
	self assert: ( mooseModel allSessionBeans size = 3 ).
	self assert: ( ( mooseModel allClasses select: [:each | each hasImplementsASessionBean ] ) size = 3 ).
	allImplementingClasses := mooseModel allClasses select: [:each | each hasImplementsASessionBean ].
	self assert: ( ( mooseModel allJEEBeans select: [:bean | allImplementingClasses includes: bean implementationClass ] ) size = 3 ).
	self assert: ( ( allImplementingClasses flatCollect: [ :each | each completeHierarchyInWhichThisResides]) size = 4 ).

	mooseModel := self sampleMooseModelWithTransaction.
	
	self assert: ( mooseModel allSessionBeans size = 0 ).
	self assert: ( ( mooseModel allClasses select: [:each | each hasImplementsASessionBean ] ) size = 0 ).
]

{ #category : #testing }
JEETests >> testHasImplementsAnEntityBean [

	| mooseModel allImplementingClasses |
	mooseModel := self sampleMooseModelWithTransAndQueryAndBeans.
	
	self assert: ( mooseModel allEntityBeans size = 3 ).
	self assert: ( ( mooseModel allClasses select: [:each | each hasImplementsAnEntityBean ] ) size = 3 ).
	allImplementingClasses := mooseModel allClasses select: [:each | each hasImplementsAnEntityBean ].
	self assert: ( ( mooseModel allJEEBeans select: [:bean | allImplementingClasses includes: bean implementationClass ] ) size = 3 ).


	mooseModel := self sampleMooseModelWithTransaction.
	
	self assert: ( mooseModel allEntityBeans size = 0 ).
	self assert: ( ( mooseModel allClasses select: [:each | each hasImplementsAnEntityBean ] ) size = 0 ).
]

{ #category : #testing }
JEETests >> testImportEjbJarFromFolder [
	
	| folderName parser root |

	folderName := UIManager default chooseDirectory: 'Folder Name:'.
	folderName = '' ifTrue: [^self].
	
	"folderName := UITheme builder chooseDirectory: 'Folder Name:'.
	folderName = '' ifTrue: [^self]."
	
	folderName fileNames do: [:n | 
				| file |
				file := (FileStream readOnlyFileNamed: (folderName fullNameFor: n)).
				(n matchesRegex: '^.+\.(xml)$') ifTrue: 
						[
							parser := OPOpaxHandler on: file "readStream".
							parser startDocument.
							parser parseDocument.
							
							root := parser stack first.
						]ifFalse:[]
					].
		self assert: (root isKindOf: OPRootElement).
	
]

{ #category : #testing }
JEETests >> testImportSqlFile [
	
	| folderName file |

	file := UITheme builder
		fileOpen: 'Import DB Structure from SQL file' 
		extensions: #('sql').
		
"	file isNil ifFalse: [
		self name: (FileDirectory baseNameFor: file localName).
		self importFromMSEStream: file.
		file close ].
"
	folderName := UIManager default chooseDirectory: 'Folder Name:'.
	
	self deny: (folderName = '').
	
	
	"folderName := UITheme builder chooseDirectory: 'Folder Name:'.
	folderName = '' ifTrue: [^self]."
	
	"folderName fileNames do: [:n | 
				| file |
				file := (FileStream readOnlyFileNamed: (folderName fullNameFor: n)).
				(n matchesRegex: '^.+\.(xml)$') ifTrue: 
						[
							parser := OPOpaxHandler on: file.
							parser startDocument.
							parser parseDocument.
							
							root := parser stack first.
							
							self halt."
														
							
							"(root allChildren select: [:eachElement | eachElement class = SessionElement])  do: [:eachElement |
								eachElement populate: self].
							(root allChildren select: [:eachElement | eachElement class = EntityElement])  do: [:eachElement |
								eachElement populate: self].
							(root allChildren select: [:eachElement | eachElement class = MessageDrivenElement])  do: [:eachElement |
								eachElement populate: self].
							(root allChildren select: [:eachElement | eachElement class = ContainerTransactionElement]) do: [:eachElement |
								eachElement populate: self]." 
						"]ifFalse:[]
					].
		
		self assert: (root isMemberOf: OPRootElement).
	"
]

{ #category : #testing }
JEETests >> testInstanciateJBeansFromAnnotations [
	
| model entityBeansAnnotations |
	MooseModel resetMeta.
	model := MooseModel new.
	model importFromMSEStream: '(
		(FAMIX.Namespace (id: 100) (name ''aNamespace''))				
		(FAMIX.Class (id: 1) (name ''AClass''))
		(FAMIX.Class (id: 10) (name ''AnotherClass''))
		(FAMIX.Method (id: 2) (name ''aMethod'') (parentType (ref: 1)))
		(FAMIX.Class (id: 3) (name ''AnAnnotationDefinitionClass''))
		(FAMIX.AnnotationType (id: 4) (name ''Entity'') (container (ref: 100)))
		(FAMIX.Class (id: 5) (name ''AnotherAnnotationDefinitionClass''))
		(FAMIX.AnnotationType (id: 6) (name ''Session'') (container (ref: 100)))
		(FAMIX.AnnotationInstance (id: 7) (annotatedEntity (ref: 1)) (annotationType (ref: 4)))
		(FAMIX.AnnotationInstance (id: 8) (annotatedEntity (ref: 10)) (annotationType (ref: 4)))
		(FAMIX.AnnotationInstance (id: 9) (annotatedEntity (ref: 2)) (annotationType (ref: 6)))
	)' readStream.
	
	
	entityBeansAnnotations := model allAnnotationInstances entities select: [:each | each annotationType name = 'Entity'].

	entityBeansAnnotations do: [:annotation | 
		
									| bean |
									bean := FAMIXEntityBean new.
									self haltOnce.
									( model allClasses select: [:class | class name = annotation annotatedEntity name.] ) do: [ :each | each parentEJBBean: bean ].
									model add: bean.
									].

	self assert: (model allEntityBeans size = 2).
	self assert: ( ( model allClasses at: 1 ) parentEJBBean = (( model allClasses select: [:class | class name = #AnotherClass ]) at: 1)  ).
	
]

{ #category : #testing }
JEETests >> testInvocationCallChain [
	
	| mooseModel  invocation |
	mooseModel := self sampleMooseModelWithInvocation.
	mooseModel allMethods do: [:each | each name = #aMethod ifTrue: [ invocation := each  deepCalledMethods ] ].
	
	self assert: ( invocation isKindOf: OrderedCollection ).
	self assert: ( invocation size = 2 ).
	self assert: ( ( invocation at: 1 ) isKindOf: FAMIXMethod ).
	self assert: ( ( invocation at: 1 ) name = #aMethod ).
	self assert: ( ( invocation at: 2 ) isKindOf: FAMIXMethod ).	
	self assert: ( ( invocation at: 2 ) name = #someMethod ).
]

{ #category : #testing }
JEETests >> testInvocationCalleeChain [
	
	| mooseModel  invocation |
	mooseModel := self sampleMooseModelWithInvocation.

	mooseModel allMethods do: [:each | each name = #someMethod ifTrue: [ invocation := ( (FAMIXMethodGroup new add: each ) deepCalleeMethods )] ].
	
	self assert: ( invocation isKindOf: OrderedCollection ).
	self assert: ( invocation size = 2 ).
	self assert: ( ( invocation at: 1 ) isKindOf: FAMIXMethod ).
	self assert: ( ( invocation at: 1 ) name = #someMethod ).
	self assert: ( ( invocation at: 2 ) isKindOf: FAMIXMethod ).	
	self assert: ( ( invocation at: 2 ) name = #aMethod ).
]

{ #category : #testing }
JEETests >> testInvocationCalleeChainWhitoutTransactionPath [
	
	| mooseModel  invocation MG |
	mooseModel := self sampleMooseModelWithTransAndQueryComplex.
	invocation := OrderedCollection new.
	MG := FAMIXMethodGroup new.


	mooseModel allMethods do: [ :each | each doesExecuteAQuery ifTrue: [ MG add: each ] ].
	invocation addAll: MG deepCalleeMethodsWithoutTransactionPath.

	self assert: ( invocation isKindOf: OrderedCollection ).
	self assert: (invocation size = 6 ).
]

{ #category : #testing }
JEETests >> testInvocationCalleeChainWithMethodGroup [

	| mooseModel  invocation MG |
	mooseModel := self sampleMooseModelWithTransAndQueryComplex.
	MG := FAMIXMethodGroup new.

	mooseModel allMethods do: [:each | each doesExecuteAQuery ifTrue: [  MG add: each ] ].

	invocation := MG deepCalleeMethods.

	self assert: ( invocation isKindOf: OrderedCollection ).
	self assert: ( invocation size = 14 ).
]

{ #category : #testing }
JEETests >> testInvocations [

	| mooseModel  invocation |
	mooseModel := self sampleMooseModelWithTransaction.
	invocation := mooseModel allInvocations.
	
	self assert: ( invocation isKindOf: MooseGroup ).
	self assert: ( invocation size = 5 ).

	self assert: ( ( invocation at: 1 ) isKindOf: FAMIXInvocation ).
	self assert: ( ( ( invocation at: 1 ) sender ) isKindOf: FAMIXMethod ).
	self assert: ( ( ( invocation at: 1 ) candidates ) isKindOf: Collection ).
	self assert: ( ( ( invocation at: 1 ) candidates ) size = 1 ).
	self assert: ( ( ( ( invocation at: 1 ) candidates ) at: 1 ) isKindOf: FAMIXMethod ).
	self assert: ( ( ( ( invocation at: 1 ) candidates ) at: 1 ) name = #someMethod ).
]

{ #category : #testing }
JEETests >> testIsADataLayerClass [

	| mooseModel  |
	mooseModel := self sampleMooseModelWithTransAndQueryWithJavaFake.

	self assert: ( mooseModel allClasses anySatisfy: [:each | each isADataLayerClass ] ).
 
	mooseModel := self sampleMooseModelWithTransAndQueryComplex.

	self assert: ( mooseModel allClasses anySatisfy: [:each | each isADataLayerClass ] ).
]

{ #category : #testing }
JEETests >> testIsADomainLayerClass [

	| mooseModel  |
	mooseModel := self sampleMooseModelWithTransAndQueryComplex.

	self assert: ( mooseModel allClasses anySatisfy: [:each | each isADomainLayerClass ] ).
]

{ #category : #testing }
JEETests >> testIsAPresentationLayerClass [

	| mooseModel  |
	mooseModel := self sampleMooseModelWithTransAndQueryComplex.

	self deny: ( mooseModel allClasses anySatisfy: [ :each | each isAPresentationLayerClass ] ).
]

{ #category : #testing }
JEETests >> testIsPartOfATransaction [

	| mooseModel  methodGroup |
	mooseModel := self sampleMooseModelWithTransAndQueryComplex.

	methodGroup := mooseModel allMethods select: [ :each | each name = #method1 ].
	
	self assert: methodGroup first isPartOfATransaction.
]

{ #category : #testing }
JEETests >> testIsPartOfATransactionVsDeepCalledMethods [

	| mooseModel  allMethods methods |
	mooseModel := self sampleMooseModelWithTransAndQueryComplex.
	
	allMethods := ( mooseModel allMethods select: #isPartOfATransaction ).
	methods := ( mooseModel allMethods select: #hasEJBTransactionAttribute ) deepCalledMethods.

	self assert: (methods isKindOf: OrderedCollection).
	self assert: ( methods size = allMethods size ).

	mooseModel := self sampleMooseModelWithTransAndQuery.
	
	allMethods := ( mooseModel allMethods select: #isPartOfATransaction ).
	methods := ( mooseModel allMethods select: #hasEJBTransactionAttribute ) deepCalledMethods.

	self assert: (methods isKindOf: OrderedCollection).
	self assert: ( methods size = allMethods size ).

	mooseModel := self sampleMooseModelWithTransaction.
	
	allMethods := ( mooseModel allMethods select: #isPartOfATransaction ).
	methods := ( mooseModel allMethods select: #hasEJBTransactionAttribute ) deepCalledMethods.

	self assert: (methods isKindOf: OrderedCollection).
	self assert: ( methods size = allMethods size ).

	mooseModel := self sampleMooseModelWithInvocation.
	
	allMethods := ( mooseModel allMethods select: #isPartOfATransaction ).
	methods := ( mooseModel allMethods select: #hasEJBTransactionAttribute ).

	self assert: (allMethods size = 0).
	self assert: ( methods size = 0 ).
]

{ #category : #testing }
JEETests >> testIsPartOfAnUnsafeTransactionPath [

	| mooseModel  |
	mooseModel := self sampleMooseModelWithTransAndQueryComplex.

	self assert: ( ( mooseModel allMethods select: [:each | each name = #method1 ] ) first isPartOfAnUnsafeTransactionPath ).
	self assert: ( ( mooseModel allMethods select: [:each | each name = #executeBatch ] ) first isPartOfAnUnsafeTransactionPath ).
	self assert: ( ( mooseModel allMethods select: [:each | each name = #method6 ] ) first isPartOfAnUnsafeTransactionPath ).
	self deny: ( ( mooseModel allMethods select: [:each | each name = #method3 ] ) first isPartOfAnUnsafeTransactionPath ).

	self assert: ( ( mooseModel allMethods select: [:each | each name = #method8 ] ) first isPartOfAnUnsafeTransactionPath ).
	self deny: ( ( mooseModel allMethods select: [:each | each name = #method9 ] ) first startATransaction ).
	self assert: ( ( mooseModel allMethods select: [:each | each name = #method9 ] ) first isPartOfAnUnsafeTransactionPath ).
	self assert: ( ( mooseModel allMethods select: [:each | each name = #method4 ] ) first isPartOfAnUnsafeTransactionPath ).
	self assert: ( ( mooseModel allMethods select: [:each | each name = #method4 ] ) first isPartOfATransaction ).
	"method 4 is called from method 8 and 9. the first start a transaction, the second does not"
	
	self assert: ( ( mooseModel allMethods select: [:each | each name = #someMethod ] ) first isPartOfAnUnsafeTransactionPath ).
]

{ #category : #testing }
JEETests >> testMessageDrivenResolving [
	
	| mooseModel aBean |
	mooseModel := self sampleMooseModel.

	(root allChildren select: [:each | each class = MessageDrivenElement]) do: [:each | each populate: mooseModel].

	self assert: mooseModel allMessageDrivenBeans size = 1.
	self assert: (mooseModel allMessageDrivenBeans contains: [:each | each name = #AMessageDriven]).

	aBean := mooseModel allMessageDrivenBeans detect: [:each | each name = #AMessageDriven].
	self assert: aBean homeInterface isNil.
	self assert: aBean remoteInterface isNil.
	self assert: aBean implementationClass notNil.
]

{ #category : #testing }
JEETests >> testNOQM [

	| mooseModel  sum |
	sum := 0.
	mooseModel := self sampleMooseModelWithTransAndQueryWithJavaAndFakeTransaction.
	
	self assert: ( ( mooseModel allClasses sumOfPropertyNamed: #NOQM ) = 3).
	
	mooseModel allClasses do: [:each | sum := sum + each numberOfQueryingMethods ].
	self assert: ( sum = 3 ).
	
]

{ #category : #testing }
JEETests >> testNOTM [

	| mooseModel  sum |
	sum := 0.
	mooseModel := self sampleMooseModelWithTransAndQueryWithJavaAndFakeTransaction.

	self assert: ( ( mooseModel allClasses sumOfPropertyNamed: #NOTM ) = 13).

	mooseModel allClasses do: [:each | sum := sum + each numberOfTransactionMethods ].
	self assert: ( sum = 13 ).
]

{ #category : #testing }
JEETests >> testRationNOQMNOM [


	| mooseModel  |
	self flag: #TODO.
	
	mooseModel := self sampleMooseModelWithTransAndQueryWithJavaAndFakeTransaction.

	self assert: ( ( mooseModel allClasses sumOfPropertyNamed: #NOQM ) = 3).
	self assert: ( ( mooseModel allClasses sumOfPropertyNamed: #NOM) = 19 ).

	self assert: ( mooseModel allClasses RatioNOQMNOM = ( 3.0 / 19.0 )).
]

{ #category : #testing }
JEETests >> testRationNOTMNOM [

	| mooseModel  |
	mooseModel := self sampleMooseModelWithTransAndQueryWithJavaAndFakeTransaction.

	self assert: ( ( mooseModel allClasses sumOfPropertyNamed: #NOTM ) = 13).
	self assert: ( ( mooseModel allClasses sumOfPropertyNamed: #NOM ) = 19 ).

	self assert: ( mooseModel allClasses RatioNOTMNOM = ( 13.0 / 19.0 )).
]

{ #category : #testing }
JEETests >> testSessionResolving [
	
	| mooseModel aStateless aStateful |
	mooseModel := self sampleMooseModel.
	(root allChildren select: [:each | each class = SessionElement]) do: [:each | each populate: mooseModel].

	self assert: mooseModel allSessionBeans size = 2.
	self assert: (mooseModel allSessionBeans contains: [:each | each name = #AStatelessSession]).
	self assert: (mooseModel allSessionBeans contains: [:each | each name = #AStatefulSession]).

	aStateless := mooseModel allSessionBeans detect: [:each | each name = #AStatelessSession].
	self assert: aStateless remoteInterface notNil.
	self assert: aStateless homeInterface notNil.
	self assert: aStateless implementationClass notNil.
	self assert: aStateless isStateless.

	aStateful := mooseModel allSessionBeans detect: [:each | each name = #AStatefulSession].
	self assert: aStateful remoteInterface notNil.
	self assert: aStateful homeInterface notNil.
	self assert: aStateful implementationClass notNil.
	self assert: aStateful isStateful.
]

{ #category : #testing }
JEETests >> testStartAUselessTransaction [

	| mooseModel  |
	mooseModel := self sampleMooseModelWithTransAndQueryWithJavaAndFakeTransaction.

	self assert: ( mooseModel allMethods select: [:each | each startAUselessTransaction ] ) size = 2.
]

{ #category : #testing }
JEETests >> testTransactionType [
	
	| mooseModel  |
	mooseModel := self sampleMooseModel.
	(root allChildren select: [:each | each class = SessionElement]) do: [:each |
		each populate: mooseModel].
	(root allChildren select: [:each | each class = ContainerTransactionElement]) do: [:each |
		each populate: mooseModel].

	self assert: (mooseModel allMethods entityNamed: #'aPackage::AStatelessSessionBean.aMethod()')
					hasEJBTransactionAttribute.
	self assert: (mooseModel allMethods entityNamed: #'aPackage::AStatelessSessionBean.anotherMethod()')
					hasEJBTransactionAttribute not.

	self assert: ((mooseModel allClasses entityNamed: #'aPackage::AStatefulSessionBean')
					methods allSatisfy: #hasEJBTransactionAttribute).
	self assert: (mooseModel allClasses entityNamed: #'aPackage::AStatefulSessionBean')
					methods size = 2
]
